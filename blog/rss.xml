<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Node.js Design Patterns Blog</title>
  <subtitle>From the authors of Node.js Design Patterns, useful bits to enrich your Node.js knowledge</subtitle>
  <link href="https://www.nodejsdesignpatterns.com/blog/rss.xml" rel="self"/>
  <link href="https://www.nodejsdesignpatterns.com/blog"/>
  <updated>2022-03-11T12:30:00Z</updated>
  <id>https://www.nodejsdesignpatterns.com/blog</id>
  <author>
    <name>Luciano Mammino and Mario Casciaro</name>
    <email>authors@nodejsdesignpatterns.com</email>
  </author>
    
    <entry>
      <title>5 Ways to install Node.js</title>
      <link href="https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js/"/>
      <updated>2020-12-24T18:30:00Z</updated>
      <id>https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js/</id>
      <content type="html">&lt;p&gt;In this article, we will explore some of the most common ways to install Node.js in your development system. We will see how to install Node.js using the official installer for various platforms, how to use a Node.js version manager such as &lt;code&gt;n&lt;/code&gt; or &lt;code&gt;nvm&lt;/code&gt; and, finally, we will also see how to compile and install Node.js from source. Along the way, we will try to disclose one or two tips to get you even more productive with Node.js!&lt;/p&gt;
&lt;p&gt;Let&#39;s get started!&lt;/p&gt;
&lt;h2 id=&quot;which-option-should-i-pick%3F&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Which option should I pick?&lt;/h2&gt;
&lt;p&gt;There are many different ways to install Node.js and every one of them comes with its own perks and drawbacks. In this article, we will try to explore the most common ones and by the end of it, you should have a good understanding of which ones should be more suitable for you.&lt;/p&gt;
&lt;h3 id=&quot;tldr%3B&quot; tabindex=&quot;-1&quot; class=&quot;title is-3&quot;&gt;TLDR;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;nvm&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt; if you develop with Node.js frequently and you expect to be needing to switch Node.js version while moving from one project to another or to debug potential compatibility issues in your project or library.&lt;/li&gt;
&lt;li&gt;Use the system package manager like &lt;code&gt;apt&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt; or &lt;code&gt;winget&lt;/code&gt; if you tend to install all your software this way and if you don&#39;t expect to be needing to switch or upgrade Node.js version too often.&lt;/li&gt;
&lt;li&gt;Install Node.js from source if you are an advanced user and if you want to contribute back to Node.js itself.&lt;/li&gt;
&lt;li&gt;Use the official Node.js installer if you don&#39;t fall in any of the previous options...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;what-other-people-seem-to-like&quot; tabindex=&quot;-1&quot; class=&quot;title is-3&quot;&gt;What other people seem to like&lt;/h3&gt;
&lt;p&gt;Before writing this article, I was actually curious to find out what are the options that most folks in my network prefer. For this reason, I run a &lt;a href=&quot;https://twitter.com/loige/status/1340999569807712257&quot;&gt;poll on Twitter&lt;/a&gt;. In this poll I asked how you prefer to install Node.js and provided 4 options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Official Installer&lt;/li&gt;
&lt;li&gt;Version manager (&lt;code&gt;nvm&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Package Manager (&lt;code&gt;apt&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt;, etc.)&lt;/li&gt;
&lt;li&gt;From source&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The results are quite interesting:&lt;/p&gt;
&lt;a href=&quot;https://twitter.com/loige/status/1340999569807712257&quot; rel=&quot;nofollow noreferrer&quot;&gt;
&lt;span style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 593px; &quot;&gt;
&lt;picture&gt;
  &lt;source type=&quot;image/png&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/poll-results-M4yStsOXME-64.png 64w, https://www.nodejsdesignpatterns.com/img/poll-results-M4yStsOXME-128.png 128w, https://www.nodejsdesignpatterns.com/img/poll-results-M4yStsOXME-256.png 256w, https://www.nodejsdesignpatterns.com/img/poll-results-M4yStsOXME-512.png 512w, https://www.nodejsdesignpatterns.com/img/poll-results-M4yStsOXME-633.png 633w&quot; sizes=&quot;(max-width: 593px) 100vw, 593px&quot; /&gt;
&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/poll-results-M4yStsOXME-64.webp 64w, https://www.nodejsdesignpatterns.com/img/poll-results-M4yStsOXME-128.webp 128w, https://www.nodejsdesignpatterns.com/img/poll-results-M4yStsOXME-256.webp 256w, https://www.nodejsdesignpatterns.com/img/poll-results-M4yStsOXME-512.webp 512w, https://www.nodejsdesignpatterns.com/img/poll-results-M4yStsOXME-633.webp 633w&quot; sizes=&quot;(max-width: 593px) 100vw, 593px&quot; /&gt;
&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;Install Node.js Twitter poll results&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/poll-results-M4yStsOXME-64.png&quot; width=&quot;64&quot; height=&quot;45&quot; /&gt;
&lt;/picture&gt;
&lt;/span&gt;
&lt;/a&gt;
&lt;p&gt;It seems quite obvious that people in my network, mostly fellow software engineers, prefer to use version managers such as &lt;code&gt;nvm&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The second place (actually very tight with the third one) is the official installer, followed by a system package manager and, last one, installing Node.js from source.&lt;/p&gt;
&lt;h3 id=&quot;lts-and-stable-releases&quot; tabindex=&quot;-1&quot; class=&quot;title is-3&quot;&gt;LTS and stable releases&lt;/h3&gt;
&lt;p&gt;Before moving on and exploring all the different installation options, it is definitely worth spending few words to learn about the types of release the Node.js project maintains.&lt;/p&gt;
&lt;p&gt;Node.js offers 2 main release lines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stable&lt;/strong&gt; (or &lt;em&gt;Current&lt;/em&gt;): every new major Node.js release is considered &amp;quot;Current&amp;quot; for the first 6 months after the publish date. The idea is to give library authors the time to test their compatibility with the new release and do any necessary change. After the 6 months period, all the odd release numbers (9, 11, 13, 15, etc.) move to the state of &lt;em&gt;Unsupported&lt;/em&gt;, while even releases (10, 12, 14, etc.) are promoted to &lt;em&gt;Long Term Support&lt;/em&gt; (or &amp;quot;LTS&amp;quot;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LTS&lt;/strong&gt;: releases marked as &amp;quot;Long Term Support&amp;quot; get critical bug fixes for a total of 30 months since the initial publish date. This makes LTS releases particularly suitable for production deployments. The most recent LTS is also called &lt;em&gt;Active LTS&lt;/em&gt;, while previous LTS versions (still under the 30 months support timeframe) are called &lt;em&gt;Maintenance LTS&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, the release coming from the current &lt;em&gt;master&lt;/em&gt; branch is considered &lt;strong&gt;Unstable&lt;/strong&gt;. This is generally a release dedicated to people maintaining Node.js or developers who want to explore new experimental features that haven&#39;t been yet included in any of the major releases.&lt;/p&gt;
&lt;p&gt;Node.js publishes an &lt;a href=&quot;https://nodejs.org/en/about/releases/&quot;&gt;official timeline of current and future releases&lt;/a&gt;. At the time of writing (December 2020), this how the timeline looks like:&lt;/p&gt;
&lt;a href=&quot;https://nodejs.org/en/about/releases/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;Node.js release timeline&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/nodejs-release-schedule_9b4bf060.svg&quot; width=&quot;760&quot; height=&quot;396&quot; /&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;p&gt;If you are still wondering which release should you use, going with the &lt;em&gt;Active LTS&lt;/em&gt; is almost always the best choice, especially if you are building production applications.&lt;/p&gt;
&lt;h2 id=&quot;install-node.js-using-n&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Install Node.js using n&lt;/h2&gt;
&lt;p&gt;Since installing Node.js using a version manager seems to be the favourite option (and it&#39;s also my personal favourite!) let&#39;s start with it.&lt;/p&gt;
&lt;p&gt;My favourite Node.js version manager is &lt;a href=&quot;https://github.com/tj/n&quot;&gt;&lt;code&gt;n&lt;/code&gt; by TJ Holowaychuk&lt;/a&gt;. The reason why I like it is because it is quite simple to install and use and it is generally up to date with the latest releases of Node.js.
The main issue with it is that it does not support Windows, so if Windows is your operative system, this is not an option for you!&lt;/p&gt;
&lt;p&gt;Let&#39;s see how to install &lt;code&gt;n&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;If you are on macOS and you have &lt;code&gt;brew&lt;/code&gt; (Homebrew) installed, the simplest way to install &lt;code&gt;n&lt;/code&gt; is to just do it with &lt;code&gt;brew&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; n&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you can use the custom install script:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-L&lt;/span&gt; https://git.io/n-install &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you are concerned about running a script downloaded from the web (as you should because &lt;a href=&quot;https://www.idontplaydarts.com/2016/04/detecting-curl-pipe-bash-server-side/&quot;&gt;&lt;code&gt;curl | bash&lt;/code&gt; might be dangerous&lt;/a&gt;), you can always download the script first, READ IT, and then run it locally...&lt;/p&gt;
&lt;p&gt;If all goes well, you should now be able to use the &lt;code&gt;n&lt;/code&gt; executable from your shell.&lt;/p&gt;
&lt;p&gt;These are some of the commands you can run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# shows the version of `n` installed in your system&lt;/span&gt;
n &lt;span class=&quot;token parameter variable&quot;&gt;--version&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# installs the latest LTS release of Node.js&lt;/span&gt;
n lts

&lt;span class=&quot;token comment&quot;&gt;# lists all the versions of Node.js currently available&lt;/span&gt;
n list

&lt;span class=&quot;token comment&quot;&gt;# install the given version of Node.js and switch to it&lt;/span&gt;
n &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;some_version&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can simply run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;n&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For an interactive prompt that will show you all the available versions, highlight the ones you have already installed and let you pick the version you want to switch to.&lt;/p&gt;
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;n Node.js version manager in action&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/n_ac172e26.gif&quot; width=&quot;640&quot; height=&quot;428&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In summary, this is where &lt;code&gt;n&lt;/code&gt; shines or falls short:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;👎 No official support for Windows&lt;/li&gt;
&lt;li&gt;👍 Very easy to install on macOS and unix systems&lt;/li&gt;
&lt;li&gt;👍 Very easy to keep your Node.js install up to date and switch version on demand&lt;/li&gt;
&lt;li&gt;👍 It keeps all the installed versions cached, so you can switch quickly between versions (no full re-install)&lt;/li&gt;
&lt;li&gt;👍 Allows to keep the setup local to the user so you don&#39;t have to use admin permission to install global packages&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;install-node.js-using-nvm&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Install Node.js using nvm&lt;/h2&gt;
&lt;p&gt;With more than 45 thousand stars on GitHub, &lt;a href=&quot;https://github.com/nvm-sh/nvm&quot;&gt;&lt;code&gt;nvm&lt;/code&gt;&lt;/a&gt;, which stands for &amp;quot;Node.js Version Manager&amp;quot; (no surprises!), is probably the most famous Node.js version manager currently available.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nvm&lt;/code&gt; works on any POSIX-compliant shell (&lt;code&gt;sh&lt;/code&gt;, &lt;code&gt;dash&lt;/code&gt;, &lt;code&gt;ksh&lt;/code&gt;, &lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;bash&lt;/code&gt;, etc.) and it has been strongly tested against the following systems: unix, macOS, and windows WSL (if you are on Windows, you can also check out &lt;a href=&quot;https://github.com/coreybutler/nvm-windows&quot;&gt;&lt;code&gt;nvm-windows&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The easiest way to install &lt;code&gt;nvm&lt;/code&gt; on your system is to use the official installer script:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;v0.37.2
&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -o- &lt;span class=&quot;token string&quot;&gt;&quot;https://raw.githubusercontent.com/nvm-sh/nvm/&lt;span class=&quot;token variable&quot;&gt;${VERSION}&lt;/span&gt;/install.sh&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: At the time of writing, version &lt;code&gt;v0.37.2&lt;/code&gt; is the latest version available. Make sure to check out if there is any new version available if you are installing &lt;code&gt;nvm&lt;/code&gt; following this tutorial.&lt;/p&gt;
&lt;p&gt;Once &lt;code&gt;nvm&lt;/code&gt; is installed in your system, here are some examples showing what you can do with it:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# installs the latest version of Node.js&lt;/span&gt;
nvm &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# installs the latest LTS version of Node.js&lt;/span&gt;
nvm &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--lts&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# installs a specific version of Node.js&lt;/span&gt;
nvm &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10.10.0&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# switch to a specific version of Node.js&lt;/span&gt;
nvm use &lt;span class=&quot;token string&quot;&gt;&quot;8.9.1&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# runs a specific script with a given version of Node.js (no switch)&lt;/span&gt;
nvm &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;4.2&quot;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; somescript.js

&lt;span class=&quot;token comment&quot;&gt;# shows the full path where a given version of Node.js was installed&lt;/span&gt;
nvm &lt;span class=&quot;token function&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;4.2&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# lists all the versions of Node.js available&lt;/span&gt;
nvm &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One great thing about &lt;code&gt;nvm&lt;/code&gt; is that it allows to specify the Node.js version you want to use for a given project.&lt;/p&gt;
&lt;p&gt;For instance, if you are working on a project that requires you to use Node.js &lt;code&gt;10.10&lt;/code&gt; you can do the following (in the root folder of the project):&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10.10&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; .nvmrc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then every time you work on that project, you only need to run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm use&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which should print something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Found &#39;/path/to/project/.nvmrc&#39; with version &amp;lt;10.10&amp;gt;
Now using node v10.10.1 (npm v6.7.3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, you can be sure that you working using the correct Node.js version for your project.&lt;/p&gt;
&lt;p&gt;If you don&#39;t want to do manually, you can enable &lt;a href=&quot;https://github.com/nvm-sh/nvm#deeper-shell-integration&quot;&gt;deeper shell integration&lt;/a&gt; to make this happen automatically when you &lt;code&gt;cd&lt;/code&gt; into a folder that has a &lt;code&gt;.nvmrc&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PRO tip&lt;/strong&gt;: You can also do that by using &lt;a href=&quot;https://asdf-vm.com/&quot;&gt;&lt;code&gt;asdf&lt;/code&gt;&lt;/a&gt;, a &lt;em&gt;meta&lt;/em&gt; version manager that offers a unified interface for various programming languages and version managers (including Node.js, of course).&lt;/p&gt;
&lt;p&gt;Finally, here are some pros and cons of &lt;code&gt;nvm&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;👍 Most popular version manager for Node.js with a large community of users.&lt;/li&gt;
&lt;li&gt;👍 Very easy to install on POSIX systems.&lt;/li&gt;
&lt;li&gt;👍 It allows for easy (and even automated) switch of Node.js version based on the project you are working on.&lt;/li&gt;
&lt;li&gt;👍 It keeps all the installed versions cached, so you can switch quicly between versions (no full re-install)&lt;/li&gt;
&lt;li&gt;👍 You can run once off commands on a given version of Node.js without having to switch the entire system to that version.&lt;/li&gt;
&lt;li&gt;👎 You might have to take a bit of time to go through the documentation and make sure you install it and use it correctly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you like to use version managers like &lt;code&gt;n&lt;/code&gt; or &lt;code&gt;nvm&lt;/code&gt;, you can also check out &lt;a href=&quot;https://volta.sh/&quot;&gt;&lt;code&gt;volta.sh&lt;/code&gt;&lt;/a&gt;, another interesting alternative in this space, which defines itself as &lt;em&gt;&amp;quot;The Hassle-Free JavaScript Tool Manager&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;install-node.js-using-the-official-installer&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Install Node.js using the official installer&lt;/h2&gt;
&lt;p&gt;The second most common way to install Node.js is through one of the official installers or the pre-compiled binaries.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Official installers&lt;/a&gt; are available on the official Node.js website for Windows and macOS and they cover the latest &lt;em&gt;Active LTS&lt;/em&gt; release and the latest &lt;em&gt;Current&lt;/em&gt; release.&lt;/p&gt;
&lt;p&gt;The installer for Windows is an executable &lt;em&gt;.msi&lt;/em&gt; installer, while the one for macOS is a &lt;em&gt;.pkg&lt;/em&gt; one.&lt;/p&gt;
&lt;p&gt;These installers behave and look like most of the installers you see while installing software on Windows or macOS. You will be presented with clickable UI which will allow you to customise and install Node.js into your system.&lt;/p&gt;
&lt;span style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 732px; &quot;&gt;
&lt;picture&gt;
  &lt;source type=&quot;image/png&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-ceJZLISO1x-64.png 64w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-ceJZLISO1x-128.png 128w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-ceJZLISO1x-256.png 256w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-ceJZLISO1x-512.png 512w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-ceJZLISO1x-732.png 732w&quot; sizes=&quot;(max-width: 732px) 100vw, 732px&quot; /&gt;
&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-ceJZLISO1x-64.webp 64w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-ceJZLISO1x-128.webp 128w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-ceJZLISO1x-256.webp 256w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-ceJZLISO1x-512.webp 512w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-ceJZLISO1x-732.webp 732w&quot; sizes=&quot;(max-width: 732px) 100vw, 732px&quot; /&gt;
&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;Install Node.js using the official macOS installer&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-ceJZLISO1x-64.png&quot; width=&quot;64&quot; height=&quot;48&quot; /&gt;
&lt;/picture&gt;
&lt;/span&gt;
&lt;p&gt;This is probably the easiest way to install Node.js as you don&#39;t need to be a POSIX expert or do any kind of manual configuration. The installer will suggest sensible defaults to you and allow you to customise the main parameters (e.g. installation path).&lt;/p&gt;
&lt;p&gt;If you are running a unix system, there is no official graphical installer available, but the &lt;a href=&quot;https://nodejs.org/dist/&quot;&gt;official Node.js download page&lt;/a&gt; offers a set of pre-compiled binaries for most architectures (32-bit, 64-bit, ARMv7 and ARMv8) for Linux, Windows and macOS.&lt;/p&gt;
&lt;span style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 700px; &quot;&gt;
&lt;picture&gt;
  &lt;source type=&quot;image/png&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-XVV50zv_zZ-64.png 64w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-XVV50zv_zZ-128.png 128w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-XVV50zv_zZ-256.png 256w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-XVV50zv_zZ-512.png 512w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-XVV50zv_zZ-1077.png 1077w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot; /&gt;
&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-XVV50zv_zZ-64.webp 64w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-XVV50zv_zZ-128.webp 128w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-XVV50zv_zZ-256.webp 256w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-XVV50zv_zZ-512.webp 512w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-XVV50zv_zZ-1077.webp 1077w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot; /&gt;
&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;Install Node.js using the official macOS installer&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-XVV50zv_zZ-64.png&quot; width=&quot;64&quot; height=&quot;26&quot; /&gt;
&lt;/picture&gt;
&lt;/span&gt;
&lt;p&gt;With the binary distribution, it is up to you to copy the necessary files in the right place. A version manager tool such as &lt;code&gt;nvm&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; makes things simple, because it takes care of downloading the correct binary release for the desired version (and for your system), then it places the files in the correct folder as expected by your operative system. If you choose to download the binaries manually, all the wiring is up to you.&lt;/p&gt;
&lt;p&gt;While installing Node.js using the official installers is probably the simplest option, doing it using the binaries is a lot more complicated and definitely more complicated than using a version manager.&lt;/p&gt;
&lt;p&gt;If you still want to go down this path, make sure to check out the &lt;a href=&quot;https://github.com/nodejs/help/wiki/Installation&quot;&gt;official tutorial for installing from Node.js pre-compiled binaries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is definitely worth mentioning that the official installer is not the only option. &lt;a href=&quot;https://nodesource.com/&quot;&gt;NodeSource&lt;/a&gt; maintains alternative installers for Debian, Red Hat, macOS and Windows. If you are interested in this approach checkout &lt;a href=&quot;https://node.dev/node-binary&quot;&gt;NodeSource Node.js Binary distributions page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To summarise, these are the main pros and cons of Node.js installers and binary distributions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;👍 Installers are quite easy to use and they don&#39;t require specific POSIX experience.&lt;/li&gt;
&lt;li&gt;👎 Hard to switch between version or upgrade. If you want to do that, you basically have to download the specific installer for the desired version and run through the full process again.&lt;/li&gt;
&lt;li&gt;👎 Installer often will install Node.js as admin, which means that you can&#39;t install global packages unless you do that as admin.&lt;/li&gt;
&lt;li&gt;👎 Binary packages require you to manually manage all the files and configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;install-node.js-using-a-package-manager&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Install Node.js using a package manager&lt;/h2&gt;
&lt;p&gt;If you are the kind of person that loves to install and manage all the software in your device using system package managers such as &lt;code&gt;apt&lt;/code&gt; (Debian / Ubuntu), &lt;code&gt;brew&lt;/code&gt; (macOS), or &lt;code&gt;winget&lt;/code&gt; (Windows), installing Node.js through a package manager is definitely an option.&lt;/p&gt;
&lt;p&gt;A word of warning though, the various Node.js packages in every package repository are not officially maintained by the Node.js core team, so your mileage might vary quite a lot. This also means that you might not have fresh releases available straight away in your package manager of choice.&lt;/p&gt;
&lt;p&gt;The Node.js core team has compiled an official documentation page on &lt;a href=&quot;https://nodejs.org/en/download/package-manager/&quot;&gt;how to install Node.js using the most common system package managers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&#39;s see here a summary for the most common options:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Homebrew (macOS)&lt;/span&gt;
brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Arch Linux&lt;/span&gt;
pacman &lt;span class=&quot;token parameter variable&quot;&gt;-S&lt;/span&gt; nodejs &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# CentOS, Fedora and Red Hat Enterprise Linux&lt;/span&gt;
dnf module list nodejs

&lt;span class=&quot;token comment&quot;&gt;# Debian and Ubuntu based Linux distributions&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt; nodejs

&lt;span class=&quot;token comment&quot;&gt;# FreeBSD&lt;/span&gt;
pkg &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Gentoo&lt;/span&gt;
emerge nodejs

&lt;span class=&quot;token comment&quot;&gt;# Winget (Windows)&lt;/span&gt;
winget &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--id&lt;/span&gt; OpenJS.Nodejs

&lt;span class=&quot;token comment&quot;&gt;# Chocolatey (Windows)&lt;/span&gt;
cinst nodejs.install

&lt;span class=&quot;token comment&quot;&gt;# Scoop (Windows)&lt;/span&gt;
scoop &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; nodejs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In short, this is &amp;quot;the good&amp;quot; and &amp;quot;the bad&amp;quot; of following this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;👍 Familiar approach if you install software often using your system package manager.&lt;/li&gt;
&lt;li&gt;👎 Latest Node.js versions might not be immediately available in your package manager of choice. Some versions might not be available at all.&lt;/li&gt;
&lt;li&gt;👎 In most cases, Node.js is installed as super user, which makes it harder to install global packages with &lt;code&gt;npm&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;install-node.js-from-source&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Install Node.js from source&lt;/h2&gt;
&lt;p&gt;If you are brave enough to be willing to build and install Node.js from source, your first stop should be the &lt;a href=&quot;https://github.com/nodejs/node/blob/main/BUILDING.md&quot;&gt;official documentation on how to build Node.js from source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a brief summary of all the steps involved:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the necessary build dependencies (C++ compiler and build toolchains) for your target system.&lt;/li&gt;
&lt;li&gt;Install Python (used by the build process).&lt;/li&gt;
&lt;li&gt;Download the source code from the &lt;a href=&quot;https://github.com/nodejs/node&quot;&gt;official repository&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Launch &lt;code&gt;./configure&lt;/code&gt; and then &lt;code&gt;make&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Test your compiled version with &lt;code&gt;make test&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Install it with &lt;code&gt;make install&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If all went well, you should have the &lt;code&gt;node&lt;/code&gt; binary available on your system and be able to run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--version&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, here is the usual summary of pros and cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;👍 You can install any version of Node.js, including master or even work in progress from a dev branch or a PR. You can even play around with custom changes and get to the point where you might decide to contribute back to Node.js.&lt;/li&gt;
&lt;li&gt;👍 You have full control on how to compile and install Node.js and don&#39;t have to follow pre-defined structures.&lt;/li&gt;
&lt;li&gt;👎 You might need to install a bunch of additional build requirements (compilers, build tools, etc.) before you can even start with the process.&lt;/li&gt;
&lt;li&gt;👎 Definitely the most complicated and the slowest way to get Node.js in your machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;node.js-with-docker&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Node.js with Docker&lt;/h2&gt;
&lt;p&gt;If you just want to &amp;quot;play&amp;quot; a bit with a Node.js REPL, you don&#39;t need to install Node.js in your system. If you have &lt;code&gt;docker&lt;/code&gt; installed in your system, running a Node.js REPL in a container is as easy as running:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&#39;s a super quick demo:&lt;/p&gt;
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;Running a Node.js REPL using Docker&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/node-repl-with-docker_edc66675.gif&quot; width=&quot;750&quot; height=&quot;482&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If you want to run a shell in a container with Node.js and &lt;code&gt;npm&lt;/code&gt; installed, then you can do the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way you can install third-party modules using &lt;code&gt;npm&lt;/code&gt;, create your own scripts and run them with &lt;code&gt;node&lt;/code&gt;. When you close the session the container and all the generated files will be destroyed.&lt;/p&gt;
&lt;p&gt;This is the perfect environment for quick and dirty experiments.&lt;/p&gt;
&lt;p&gt;Note, that you can also use Docker as a complete environment for development and not just for quick tests. Docker is actually great for keeping different Node.js version and other dependencies isolated on a per-project basis. Exploring this setup goes beyond the scope of this article, but there is ton of reference on the web about how you might use Docker for Node.js development.&lt;/p&gt;
&lt;h2 id=&quot;node.js-online&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Node.js online&lt;/h2&gt;
&lt;p&gt;But what if you don&#39;t have docker installed and still want to have an environment where you can write and run some Node.js code?&lt;/p&gt;
&lt;p&gt;Well, there is no shortage of platforms online that will give you a Node.js environment and an IDE that you can use to write and run JavaScript online.&lt;/p&gt;
&lt;p&gt;These environments often offer delightful additional features like collaborative edit and the possibility to host and share your applications.&lt;/p&gt;
&lt;p&gt;Here&#39;s a non-exhaustive list of services that you might want to try if you just need a quick way to write and share some Node.js examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://codesandbox.io/&quot;&gt;CodeSandbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://repl.it/&quot;&gt;Repl.it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://glitch.com/&quot;&gt;Glitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackblitz.com/&quot;&gt;Stackblitz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these services offer a quite generous free plan, so you only need to sign up to start coding!&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This concludes our list of ways to install Node.js. At this point, I hope you feel comfortable enough picking one of the options suggested here and that along the way you learned a trick or two.&lt;/p&gt;
&lt;p&gt;If you enjoyed this article please consider sharing it and don&#39;t hesitate to reach out to me &lt;a href=&quot;https://twitter.com/loige&quot;&gt;on Twitter&lt;/a&gt;. I am quite curious to find out what is your favourite way to install Node.js and why!&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;
&lt;h3 id=&quot;credits&quot; tabindex=&quot;-1&quot; class=&quot;title is-3&quot;&gt;Credits&lt;/h3&gt;
&lt;p&gt;This article was possible only thanks to the great support and feedback of some amazing engineers. Here are some of the names that helped me (and sorry if I am forgetting someone): &lt;a href=&quot;https://twitter.com/_Don_Quijote_&quot;&gt;@_Don_Quijote_&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/giuseppemorelli&quot;&gt;@GiuseppeMorelli&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/oliverturner&quot;&gt;@oliverturner&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/aetheon&quot;&gt;@aetheon&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/dottorblaster&quot;&gt;@dottorblaster&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/bcomnes&quot;&gt;@bcomnes&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://twitter.com/wa7son&quot;&gt;@wa7son&lt;/a&gt;.&lt;/p&gt;
</content>
    </entry>
    
    <entry>
      <title>Node.js race conditions</title>
      <link href="https://www.nodejsdesignpatterns.com/blog/node-js-race-conditions/"/>
      <updated>2021-01-24T18:35:00Z</updated>
      <id>https://www.nodejsdesignpatterns.com/blog/node-js-race-conditions/</id>
      <content type="html">&lt;p&gt;A single-threaded event loop like the one used by JavaScript and Node.js, makes it somewhat harder to have race conditions, but, SPOILER ALERT: race conditions are still possible!&lt;/p&gt;
&lt;p&gt;In this article, we will explore the topic of race conditions in Node.js. We will discuss some examples and present a few different solutions that can help us to make our code &lt;em&gt;race condition free&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;what-is-a-race-condition%3F&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;What is a race condition?&lt;/h2&gt;
&lt;p&gt;First of all, let&#39;s try to clarify what a &lt;em&gt;race condition&lt;/em&gt; actually is.&lt;/p&gt;
&lt;p&gt;A race condition is a type of &lt;em&gt;programming error&lt;/em&gt; that can occur when multiple processes or threads are accessing the same shared resource, for instance, a file on a file system or a record in a database, and at least one of them is trying to modify the resource.&lt;/p&gt;
&lt;p&gt;Let&#39;s try to present an example. Imagine that while a thread is trying to rename a file, another thread is trying to delete the same file. In this case, the second thread will receive an error because, when it&#39;s trying to delete the file, the file has already been renamed. Or, the other way around, while one thread is trying to rename the file, the file was already deleted by the other thread and it&#39;s not available on the filesystem anymore.&lt;/p&gt;
&lt;p&gt;In other cases, race conditions can be more subtle, because they wouldn&#39;t result in the program crashing, but they might just be the source of an incorrect or inconsistent behaviour. In these cases, since there is no explicit error and no stack trace, the issue is generally much harder to troubleshoot and fix.&lt;/p&gt;
&lt;p&gt;A classic example is when 2 threads are trying to update the same data source and the new information is the result of a function applied to the current value.&lt;/p&gt;
&lt;p&gt;Let&#39;s pretend we are building a Roman Empire simulation game in which we can manage some cash flow and we have a global balance in &lt;a href=&quot;https://en.wiktionary.org/wiki/aureus&quot;&gt;&lt;em&gt;aureus&lt;/em&gt;&lt;/a&gt; (a currency used in the Roman Empire around 100 B.C.E.). Now, let&#39;s say that our initial balance is &lt;code&gt;0&lt;/code&gt; &lt;em&gt;aurei&lt;/em&gt; and that there are two independent game components (possibly running on separate threads) that are trying to increase the balance by &lt;code&gt;50&lt;/code&gt; &lt;em&gt;aurei&lt;/em&gt; each, we should expect that in the end, the balance is &lt;code&gt;100&lt;/code&gt; &lt;em&gt;aurei&lt;/em&gt;, right?&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;0 + 50 + 50 = 100 🤑&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we implement this in a naive way, we might have the two components performing three distinct operations each:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read the current value for &lt;code&gt;balance&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;50&lt;/code&gt; &lt;em&gt;aurei&lt;/em&gt; to it&lt;/li&gt;
&lt;li&gt;Save the resulting value into &lt;code&gt;balance&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since the two components are running in parallel, without any synchronisation mechanism, the following case could happen:&lt;/p&gt;
&lt;span style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 848px; &quot;&gt;
&lt;picture&gt;
  &lt;source type=&quot;image/png&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-Fngk3b5IPO-64.png 64w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-Fngk3b5IPO-128.png 128w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-Fngk3b5IPO-256.png 256w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-Fngk3b5IPO-512.png 512w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-Fngk3b5IPO-2002.png 2002w&quot; sizes=&quot;(max-width: 848px) 100vw, 848px&quot; /&gt;
&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-Fngk3b5IPO-64.webp 64w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-Fngk3b5IPO-128.webp 128w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-Fngk3b5IPO-256.webp 256w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-Fngk3b5IPO-512.webp 512w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-Fngk3b5IPO-2002.webp 2002w&quot; sizes=&quot;(max-width: 848px) 100vw, 848px&quot; /&gt;
&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;A race condition example showing 2 processes trying to update a balance&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-Fngk3b5IPO-64.png&quot; width=&quot;64&quot; height=&quot;30&quot; /&gt;
&lt;/picture&gt;
&lt;/span&gt;
&lt;p&gt;In the picture above you can see that &lt;strong&gt;Component 2&lt;/strong&gt; ends up having a &lt;em&gt;stale&lt;/em&gt; view of the balance: the balance gets changed by &lt;strong&gt;Component 1&lt;/strong&gt; after &lt;strong&gt;Component 2&lt;/strong&gt; has read the balance. For this reason, when &lt;strong&gt;Component 2&lt;/strong&gt; performs its own update, it is effectively overriding any change previously made by &lt;strong&gt;Component 1&lt;/strong&gt;. This is why we have a race condition: the two components are effectively racing to complete their own tasks and they might end up stepping onto each other&#39;s toes! This doesn&#39;t make &lt;em&gt;Julius&lt;/em&gt; happy I am afraid...&lt;/p&gt;
&lt;p&gt;One way to solve this problem is to isolate the 2 concurrent operations into &lt;em&gt;transactions&lt;/em&gt; and make sure that there is only one transaction running at a given time. This idea might look like this:&lt;/p&gt;
&lt;span style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 848px; &quot;&gt;
&lt;picture&gt;
  &lt;source type=&quot;image/png&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-JsApfpFGe9-64.png 64w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-JsApfpFGe9-128.png 128w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-JsApfpFGe9-256.png 256w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-JsApfpFGe9-512.png 512w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-JsApfpFGe9-2022.png 2022w&quot; sizes=&quot;(max-width: 848px) 100vw, 848px&quot; /&gt;
&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-JsApfpFGe9-64.webp 64w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-JsApfpFGe9-128.webp 128w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-JsApfpFGe9-256.webp 256w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-JsApfpFGe9-512.webp 512w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-JsApfpFGe9-2022.webp 2022w&quot; sizes=&quot;(max-width: 848px) 100vw, 848px&quot; /&gt;
&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;Fixing a race condition using a transaction&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-JsApfpFGe9-64.png&quot; width=&quot;64&quot; height=&quot;31&quot; /&gt;
&lt;/picture&gt;
&lt;/span&gt;
&lt;p&gt;In the last picture, we are using transactions to make sure that all the steps of &lt;strong&gt;Component 1&lt;/strong&gt; happen in order before all the steps of &lt;strong&gt;Component 2&lt;/strong&gt;. This prevents any &lt;em&gt;stale read&lt;/em&gt; and makes sure that every component always has an up to date view of the world before doing any change. You can stop holding your breath now, Julius!&lt;/p&gt;
&lt;p&gt;In the rest of this article, we will zoom in more on race conditions in the context of Node.js and we will see some other approaches to deal with them.&lt;/p&gt;
&lt;h2 id=&quot;can-we-have-race-conditions-in-node.js%3F&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Can we have race conditions in Node.js?&lt;/h2&gt;
&lt;p&gt;It is a common misconception to think that Node.js does not have race conditions because of its single-threaded nature. While it is true that in Node.js you would not have multiple threads competing for resources, you might still end up with tasks belonging to different logical transactions being executed in an order that might result in &lt;em&gt;stale reads&lt;/em&gt; and generate a race condition.&lt;/p&gt;
&lt;p&gt;In the example that we illustrated above, we intentionally represented the various tasks (&lt;em&gt;read&lt;/em&gt;, &lt;em&gt;increase&lt;/em&gt; and &lt;em&gt;save&lt;/em&gt;) as discrete units. Note how the system is never executing more than one task at the same time. This is a simple but accurate representation of how the Node.js event loop processes tasks on a single thread. Nonetheless, you can see that there might be situations where multiple logical transactions (e.g. multiple deposits) are scheduled concurrently on the event loop and the discrete tasks might end up being intermingled, which results in a race condition.&lt;/p&gt;
&lt;p&gt;So... &lt;strong&gt;Yes&lt;/strong&gt;, we can have race conditions in Node.js!&lt;/p&gt;
&lt;h2 id=&quot;a-node.js-example-with-a-race-condition&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;A Node.js example with a race condition&lt;/h2&gt;
&lt;p&gt;Now, let&#39;s talk some code! Let&#39;s try to re-create the Roman Empire simulation game example that we discussed above.&lt;/p&gt;
&lt;p&gt;In ancient Rome, Romans used to export olives and grapes. No wonder Italy is still famous worldwide for olive oil and wine! In our game, we want to be able to harvest olives and grapes and then sell them as a means to acquire more &lt;em&gt;aurei&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We are going to have two functions that can increase the balance by &lt;code&gt;50&lt;/code&gt; &lt;em&gt;aurei&lt;/em&gt; which we are going to call &lt;code&gt;sellOlives()&lt;/code&gt; and &lt;code&gt;sellGrapes()&lt;/code&gt;. We will also assume that every time the balance is changed, it is persisted to a data storage of sort (e.g. a database). For the sake of this example, we won&#39;t be using a real data storage, but we will just simulate some random asynchronous delay before reading or modifying a global value. This will be enough to illustrate how we can end up with a race condition.&lt;/p&gt;
&lt;p&gt;For starts, let&#39;s see what a buggy implementation might look like:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Utility function to simulate some delay (e.g. reading from or writing to a database).&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// It will take from 0 to 50ms in a random fashion.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;randomDelay&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Our global balance.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// In a more complete implementation, this will live in the persistent data storage.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// simulates random delay to retrieve data from data storage&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;randomDelay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; balance
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// simulates random delay to write the data to the data storage&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;randomDelay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellGrapes - balance loaded: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellGrapes - balance updated: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newBalance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellOlives - balance loaded: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellOlives - balance updated: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newBalance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; transaction1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// NOTE: no `await`&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; transaction2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// NOTE: no `await`&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; transaction1 &lt;span class=&quot;token comment&quot;&gt;// NOTE: awaiting here does not stop `transaction2` &lt;/span&gt;
                     &lt;span class=&quot;token comment&quot;&gt;// from being scheduled before transaction 1 is completed&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; transaction2
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Final balance: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we execute this code we might end up with different results. In one case we might get the correct outcome:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sellOlives - balance loaded: 0
sellOlives - balance updated: 50
sellGrapes - balance loaded: 50
sellGrapes - balance updated: 100
Final balance: 100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But in other cases we might end up in a bad state:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sellGrapes - balance loaded: 0
sellOlives - balance loaded: 0
sellGrapes - balance updated: 50
sellOlives - balance updated: 50
Final balance: 50&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how in this last case, &lt;code&gt;sellOlives&lt;/code&gt; is essentially a stale read and therefore it will end up overriding the balance disregarding any work already done by &lt;code&gt;sellGrapes&lt;/code&gt;. Yes, we do have a race condition, unfortunately!&lt;/p&gt;
&lt;p&gt;Now, this example is simple ad it is not too hard to pinpoint exactly where the race condition has originated by just looking at the code.&lt;/p&gt;
&lt;p&gt;Take a minute or two to read the code again. Check out the output from the 2 cases as well. Pay attention to the notes and the log messages and try to imagine how the Node.js runtime might execute this code in the 2 different scenarios.&lt;/p&gt;
&lt;p&gt;Ok, now that you have done that, let&#39;s discuss together what happens.&lt;/p&gt;
&lt;p&gt;In our &lt;code&gt;main&lt;/code&gt; function, when we execute &lt;code&gt;sellGrapes()&lt;/code&gt; and &lt;code&gt;sellOlives()&lt;/code&gt;, since we are not awaiting the two operations independently, we are essentially scheduling both operations onto the event loop.&lt;/p&gt;
&lt;p&gt;We only await the two transactions after they have been already scheduled, which means that they will work concurrently. After the two transactions have been scheduled, we wait for &lt;code&gt;transaction1&lt;/code&gt; to complete and only then we wait for &lt;code&gt;transaction2&lt;/code&gt; to complete. Note that &lt;code&gt;transaction2&lt;/code&gt; might complete even before &lt;code&gt;transaction1&lt;/code&gt;. In other words, awaiting for &lt;code&gt;transaction1&lt;/code&gt; doesn&#39;t block &lt;code&gt;transaction2&lt;/code&gt; in any way.&lt;/p&gt;
&lt;p&gt;This approach is similar to writing the following code:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;Promise.all()&lt;/code&gt; is a more commonly used way to schedule different tasks to run concurrently.&lt;/p&gt;
&lt;p&gt;Note that with &lt;code&gt;Promise.all()&lt;/code&gt;, the resulting promise will reject as soon as any of the promises rejects. In our previous example, since we await the two promises independently, we will always catch errors in &lt;code&gt;transaction1&lt;/code&gt; before &lt;code&gt;transaction2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But let&#39;s not digress too much into this. Now that we understand the problem, how do we fix the race condition?&lt;/p&gt;
&lt;p&gt;Well, it turns out that in this simple case, we might make things right quite easily:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;- schedule the first transaction and wait for completion&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;- when it&#39;s completed, we start the second transaction &lt;/span&gt;
                     &lt;span class=&quot;token comment&quot;&gt;//    and wait for completion&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Final balance: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This implementation will consistently produce the following output:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sellGrapes - balance loaded: 0
sellGrapes - balance updated: 50
sellOlives - balance loaded: 50
sellOlives - balance updated: 100
Final balance: 100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can observe, &lt;code&gt;sellGrapes&lt;/code&gt; is always started and completed &lt;em&gt;before&lt;/em&gt; we start &lt;code&gt;sellOlives&lt;/code&gt;. This makes the two logical transactions isolated and makes sure their tasks won&#39;t end up being mixed together in random order.&lt;/p&gt;
&lt;p&gt;Problem solved... &lt;em&gt;vade in pacem&lt;/em&gt; dear race condition!&lt;/p&gt;
&lt;h2 id=&quot;using-a-mutex-in-node.js&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Using a mutex in Node.js&lt;/h2&gt;
&lt;p&gt;OK, the previous example was illustrative, but if we are building a real game, chances are things will end up being a lot more complicated. We will probably end up having many different actions that might cause a change of balance. Those actions might be the result of a particular sequence of events and it might become hard to track down the discrete logical transactions that we have to &lt;em&gt;serialize&lt;/em&gt; in order to avoid race conditions.&lt;/p&gt;
&lt;p&gt;Ideally, we don&#39;t want to think in terms of transactions, we just need to make sure that we never read the balance if there is another concurrent operation that is ready to change its value.&lt;/p&gt;
&lt;p&gt;To be able to do this we need two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have a way to identify when &lt;em&gt;we are about to change&lt;/em&gt; the balance&lt;/li&gt;
&lt;li&gt;Let other events wait in line until the change is completed before reading the balance&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We could say that when &lt;em&gt;we are about to change&lt;/em&gt; the balance we enter a &lt;em&gt;critical path&lt;/em&gt; and that we don&#39;t want to intermingle events from different logical transactions in a critical path.&lt;/p&gt;
&lt;p&gt;One way to achieve this is by using a &lt;em&gt;Mutex&lt;/em&gt; (which stands for &lt;a href=&quot;https://en.wikipedia.org/wiki/Mutual_exclusion&quot;&gt;&lt;strong&gt;mut&lt;/strong&gt;ual &lt;strong&gt;ex&lt;/strong&gt;clusion&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;A mutex is a mechanism that allows synchronising access to a shared resource.&lt;/p&gt;
&lt;p&gt;We can see a mutex as a shared object that allows us to mark when the code execution is entering and exiting from a critical path. In addition to that, a mutex can help us to queue other logical transactions that want to access the same critical path while one transaction is being processed.&lt;/p&gt;
&lt;p&gt;Before talking code, be aware that using a mutex might have a performance impact in your application and that this solution won&#39;t work if you use a distributed or a multi-process setup. More details on this later.&lt;/p&gt;
&lt;h2 id=&quot;using-async-mutex&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Using &lt;code&gt;async-mutex&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A very useful library that we can useg is &lt;a href=&quot;https://npm.im/async-mutex&quot;&gt;&lt;code&gt;async-mutex&lt;/code&gt;&lt;/a&gt;. This library provides a promise-based implementation of the mutex pattern.&lt;/p&gt;
&lt;p&gt;You can install this library from &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--save&lt;/span&gt; async-mutex&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, here&#39;s an example of how we could use this library to mark the beginning and the end of a critical path:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Mutex &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;async-mutex&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// creates a shared mutex instance&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doingSomethingCritical&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; release &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; mutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// acquires access to the critical path&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ... do stuff on the critical path&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// completes the work on the critical path&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, we are using a global mutex instance to mark the beginning and the end of a critical path which happens inside our &lt;code&gt;doingSomethingCritical()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;When we call &lt;code&gt;mutex.acquire()&lt;/code&gt;, this method will return a promise. If no other concurrent operation is currently on the same critical path, the promise resolves to a function that we call &lt;code&gt;release&lt;/code&gt;. In this situation, we are essentially granted exclusive access to the critical path. If some concurrent operation is on the critical path already, the promise won&#39;t resolve until the concurrent operation already on the critical path has completed. This is how concurrent operations &lt;em&gt;wait in line&lt;/em&gt; for our exclusive access to the critical path.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;release&lt;/code&gt; function must be invoked to mark the completion of the work on the critical path. It effectively &lt;em&gt;releases&lt;/em&gt; the exclusive access to the critical path and makes it available to the next task in line. Note that we are using a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt; block here to make sure that &lt;code&gt;release&lt;/code&gt; is called even in case of an exception. It is very important to do so. In fact, failing to call &lt;code&gt;release&lt;/code&gt;, will leave all the other events waiting in line forever!&lt;/p&gt;
&lt;p&gt;Now let&#39;s try to use &lt;code&gt;async-mutex&lt;/code&gt; to avoid race conditions in our game:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Mutex &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;async-mutex&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;randomDelay&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// global mutex instance&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// this code will need exclusive access to the balance&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// so we consider this to be a critical path&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; release &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; mutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// get access to the critical path (or wait in line)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellGrapes - balance loaded: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellGrapes - balance updated: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newBalance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// completes work on the critical path&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// similar to `sellGrapes` this is a critical path because&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// it needs exclusive access to balance&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; release &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; mutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellOlives - balance loaded: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellOlives - balance updated: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newBalance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Here we can call many events safely, the mutex will guarantee that the&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// competing events are executed in the right order!&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Final balance: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above will consistently produce the following output:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sellGrapes - balance loaded: 0
sellGrapes - balance updated: 50
sellOlives - balance loaded: 50
sellOlives - balance updated: 100
sellGrapes - balance loaded: 100
sellGrapes - balance updated: 150
sellOlives - balance loaded: 150
sellOlives - balance updated: 200
sellGrapes - balance loaded: 200
sellGrapes - balance updated: 250
sellOlives - balance loaded: 250
sellOlives - balance updated: 300
Final balance: 300&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of the code has been truncated for simplicity. You can find all the examples in &lt;a href=&quot;https://github.com/lmammino/node-js-race-conditions&quot;&gt;this repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From the example above, you can see how mutexes can provide a convenient way of thinking about exclusive access and how they can help to avoid race conditions. We are intentionally triggering multiple calls to &lt;code&gt;sellGrapes()&lt;/code&gt; and &lt;code&gt;sellOlives()&lt;/code&gt; concurrently, to make obvious that we don&#39;t have to think about potential race conditions at the &lt;em&gt;calling point&lt;/em&gt;. This means that, as our game grows more complicated, we can keep invoking these functions without having to worry about generating new race conditions.&lt;/p&gt;
&lt;h2 id=&quot;let&#39;s-implement-a-mutex&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Let&#39;s implement a mutex&lt;/h2&gt;
&lt;p&gt;But what if we are dealing with a race condition only in one place in our entire application? Is it worth to include and manage an external dependecy just because of that? Can we come up with a simpler alternative that does not require us to install a new dependency?&lt;/p&gt;
&lt;p&gt;It turns out that we can easily do that! Let&#39;s see how we can implement our own mutex.&lt;/p&gt;
&lt;p&gt;Note that the solution we are going to present here is effectively a variation of the &lt;strong&gt;sequential execution pattern&lt;/strong&gt; using promises that is presented in &lt;em&gt;Chapter 5&lt;/em&gt; of &lt;a href=&quot;https://www.nodejsdesignpatterns.com/&quot;&gt;Node.js Design Patterns&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea is to inizialize our global mutex as an instance of a resolved promise:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in our critical path we can do something like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doingSomethingCritical&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ... do stuff on the critical path&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ... manage errors on the critical path&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; mutex
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea is that every time we are invoking the function &lt;code&gt;doingSomethingCritical()&lt;/code&gt; we are effectively &amp;quot;queueing&amp;quot; the execution of the code on the critical path using &lt;code&gt;mutex.then()&lt;/code&gt;. If this is the first call, our initial instance of the &lt;code&gt;mutex&lt;/code&gt; promise is a resolved promise, so the code on the critical path will be executed straight away on the next cycle of the event loop.&lt;/p&gt;
&lt;p&gt;Calling &lt;code&gt;.then()&lt;/code&gt; on a promise returns a new promise instance that is used to replace the original &lt;code&gt;mutex&lt;/code&gt; instance and it&#39;s also returned by the &lt;code&gt;doingSomethingCritical()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;This allows us to have concurrent calls to &lt;code&gt;doingSomethingCritical()&lt;/code&gt; being queued to be executed sequentially.&lt;/p&gt;
&lt;p&gt;Note that we also specify a &lt;code&gt;mutex.catch()&lt;/code&gt;. This allows us to catch and react to specific errors, but it also allows us not to break the chain of sequential execution in case an operation fails.&lt;/p&gt;
&lt;p&gt;Ok, now that we have explored this idea, let&#39;s apply it to our example.&lt;/p&gt;
&lt;p&gt;This is how our code is going to look like:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;randomDelay&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// global mutex instance&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellGrapes - balance loaded: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellGrapes - balance updated: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newBalance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; mutex
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellOlives - balance loaded: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellOlives - balance updated: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newBalance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; mutex
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Final balance: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you try to run this code, you will see that it consistently prints the same output as per our previous implementation using &lt;code&gt;async-mutex&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;So, here we have it, a simple mutex implementation in just few lines of code leveraging promise chainability!&lt;/p&gt;
&lt;h2 id=&quot;mutex-with-multiple-processes&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Mutex with multiple processes&lt;/h2&gt;
&lt;p&gt;It is important to mention that the solutions presented in this article only work in a Node.js application running on a single process.&lt;/p&gt;
&lt;p&gt;If you are running your application on multiple processes (for instance, by using the &lt;a href=&quot;https://nodejs.org/api/cluster.html&quot;&gt;&lt;code&gt;cluster&lt;/code&gt; module&lt;/a&gt;, &lt;a href=&quot;https://nodejs.org/api/worker_threads.html&quot;&gt;worker threads&lt;/a&gt; or a multi-process runner like &lt;a href=&quot;https://pm2.keymetrics.io/&quot;&gt;&lt;code&gt;pm2&lt;/code&gt;&lt;/a&gt;) using a mutex within our code is not going to solve race conditions across processes. This is also the case if you are running your application on multiple servers.&lt;/p&gt;
&lt;p&gt;In these cases you have to rely on more complicated solutions like &lt;a href=&quot;https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html&quot;&gt;distributed locks&lt;/a&gt; or, if you are using a central database, you can rely on solutions provided by your own database systems. We will discuss a simple example in the next section.&lt;/p&gt;
&lt;h2 id=&quot;mutex-performance&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Mutex performance&lt;/h2&gt;
&lt;p&gt;We already mentioned that using a mutex might have a relevant performance impact in your application.&lt;/p&gt;
&lt;p&gt;To try to visualize why a mutex has a performance impact in your application let&#39;s try to think about the case when an operation is trying to acquire a lock on a mutex but the mutex is already locked. In this case, our operation is simply waiting without doing nothing, while for instance it could be doing some IO operation like connecting to the database or sending a query. It will probably take the event loop several spins before the lock is released and the operation that is waiting in line can acquire the lock. This get worse with a high number of operations waiting in line.&lt;/p&gt;
&lt;p&gt;With a mutex we are effectively serializing tasks, making sure that executed in sequence and non-concurrently. If you abuse this pattern, you might end up in a situation where you could effectively eliminate all concurrency from your application.&lt;/p&gt;
&lt;p&gt;Measuring how a mutex might impact your specific application is not something that can be done holistically and we recommend you to run your own benchmarks to find out what is the effect of introducing one or more mutex instances in your application.&lt;/p&gt;
&lt;p&gt;Our general recommendation is to use a mutex only when you are sure you have to protect your code from a race condition and to try to make the critical path as short as possible.&lt;/p&gt;
&lt;p&gt;Be aware that a mutex is not the only solution to race conditions. For instance, in our example, if we were to use a real relational database as a data storage, we could have avoided any race condition (at the application level) by letting the database itself do the increment using a SQL query:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;UPDATE&lt;/span&gt; game &lt;span class=&quot;token keyword&quot;&gt;SET&lt;/span&gt; aurei &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; aurei &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this approach, we are trusting the database to do the right thing and we are not slowing down our application.&lt;/p&gt;
&lt;p&gt;And there are other alternative approches. Just to name one, &lt;a href=&quot;https://en.wikipedia.org/wiki/Optimistic_concurrency_control&quot;&gt;optimistic locks&lt;/a&gt; might provide a great alternative if race conditions are possible but they actually happen only in rare occasions.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, we have explored race conditions and learned why they can be harmful. We showed how race conditions can happen in Node.js and several techniques to address them including the adoptopm of a mutex.&lt;/p&gt;
&lt;p&gt;This is an interesting topic which often gets explored in the context of multi-threaded languages. The theory isn&#39;t much different but there are some important differences when dealing with concurrent, single-threaded languages like Node.js.&lt;/p&gt;
&lt;p&gt;If you are curious to understand better the difference between &lt;strong&gt;Parallelism&lt;/strong&gt; and &lt;strong&gt;Concurrency&lt;/strong&gt; I strongly recommend you to read this great essay titled &lt;a href=&quot;http://yosefk.com/blog/parallelism-and-concurrency-need-different-tools.html&quot;&gt;parallelism and concurrency need different tools&lt;/a&gt;. You can also watch this wonderful talk by &lt;a href=&quot;https://twitter.com/steveklabnik&quot;&gt;Steve Klabnik&lt;/a&gt; called &lt;a href=&quot;https://www.youtube.com/watch?v=lJ3NC-R3gSI&quot;&gt;Rust&#39;s Journey to Async/Await&lt;/a&gt; (yes, it&#39;s not only about Rust, trust me).&lt;/p&gt;
&lt;p&gt;I really hope you enjoyed this article. Make sure to &lt;a href=&quot;https://twitter.com/loige&quot;&gt;reach out to me on Twitter&lt;/a&gt; and let me know what you think!&lt;/p&gt;
&lt;p&gt;Bye 😋&lt;/p&gt;
&lt;h2 id=&quot;credits&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Credits&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/Jack-Barry&quot;&gt;Jack Barry&lt;/a&gt; for the inspiration for this post on the &lt;a href=&quot;https://github.com/PacktPublishing/Node.js-Design-Patterns-Third-Edition/discussions/25&quot;&gt;Node.js Design Patterns discussion board&lt;/a&gt;. Thanks to &lt;a href=&quot;https://twitter.com/quasi_modal&quot;&gt;Peter Caulfield&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/StefanoAbalsamo&quot;&gt;Stefano Abalsamo&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/gbinside&quot;&gt;Roberto Gambuzzi&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/mariocasciaro&quot;&gt;Mario Casciaro&lt;/a&gt; for kindly reviewing this post.&lt;/p&gt;
</content>
    </entry>
    
    <entry>
      <title>Node.js development with Docker and Docker Compose</title>
      <link href="https://www.nodejsdesignpatterns.com/blog/node-js-development-with-docker-and-docker-compose/"/>
      <updated>2021-04-07T18:00:00Z</updated>
      <id>https://www.nodejsdesignpatterns.com/blog/node-js-development-with-docker-and-docker-compose/</id>
      <content type="html">&lt;p&gt;In this article, we are going to learn how to use Docker and Docker Compose for Node.js development. We will discuss the main benefits of this approach and explore some interesting examples. While doing that we will also learn what Docker is and why you should consider it, especially if you are developing multiple projects or if you are working in a team.&lt;/p&gt;
&lt;h2 id=&quot;what-is-a-docker-container-in-simple-terms%3F&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;What is a Docker container in simple terms?&lt;/h2&gt;
&lt;p&gt;To explain what a Docker container is, let&#39;s just start by imagining a virtual machine or a virtual server provisioned to run a specific program.&lt;/p&gt;
&lt;p&gt;Virtual machines are great because they allow you to run some useful software in an isolated way and they are easy to distribute. You can create an image and run it in different environments. You can even run it in your own desktop machine or share it with your own colleagues. It&#39;s a consistent medium to develop and deploy software.&lt;/p&gt;
&lt;p&gt;In many ways, Docker containers, are very similar to virtual machines. Docker containers are another way to package (or &amp;quot;containerise&amp;quot;) software and run it across different environments.&lt;/p&gt;
&lt;p&gt;But there&#39;s a fundamental difference with virtual machines. With Docker containers, you don&#39;t have the overhead of having to include an entire operating system as part of your image, but only the basic dependencies needed to run some programs.&lt;/p&gt;
&lt;span style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 800px; &quot;&gt;
&lt;picture&gt;
  &lt;source type=&quot;image/png&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/docker-vs-virtual-machines-m-F-bSuk1W-64.png 64w, https://www.nodejsdesignpatterns.com/img/docker-vs-virtual-machines-m-F-bSuk1W-128.png 128w, https://www.nodejsdesignpatterns.com/img/docker-vs-virtual-machines-m-F-bSuk1W-256.png 256w, https://www.nodejsdesignpatterns.com/img/docker-vs-virtual-machines-m-F-bSuk1W-512.png 512w, https://www.nodejsdesignpatterns.com/img/docker-vs-virtual-machines-m-F-bSuk1W-2900.png 2900w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot; /&gt;
&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/docker-vs-virtual-machines-m-F-bSuk1W-64.webp 64w, https://www.nodejsdesignpatterns.com/img/docker-vs-virtual-machines-m-F-bSuk1W-128.webp 128w, https://www.nodejsdesignpatterns.com/img/docker-vs-virtual-machines-m-F-bSuk1W-256.webp 256w, https://www.nodejsdesignpatterns.com/img/docker-vs-virtual-machines-m-F-bSuk1W-512.webp 512w, https://www.nodejsdesignpatterns.com/img/docker-vs-virtual-machines-m-F-bSuk1W-2900.webp 2900w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot; /&gt;
&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;Docker VS virtual machines&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/docker-vs-virtual-machines-m-F-bSuk1W-64.png&quot; width=&quot;64&quot; height=&quot;23&quot; /&gt;
&lt;/picture&gt;
&lt;/span&gt;
&lt;p&gt;From the image above you can see that the &lt;strong&gt;Container Engine&lt;/strong&gt; runs on top of the operative system and that you don&#39;t have to include a guest operative system into your container images. For this reason, containers are much more lightweight than traditional virtual machines, while still providing the benefits of isolation and portability.&lt;/p&gt;
&lt;p&gt;But how can we create a new Docker image?&lt;/p&gt;
&lt;p&gt;This is generally done by using a special configuration file called &lt;code&gt;Dockerfile&lt;/code&gt;. Let&#39;s not indulge with more theory and let&#39;s see an example instead!&lt;/p&gt;
&lt;p&gt;Before getting started let&#39;s make sure that you have Docker installed in your machine. You can get docker for most platform using the installers available on the &lt;a href=&quot;https://docs.docker.com/get-docker/&quot;&gt;official Docker website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ok, if you are ready, let&#39;s create our first &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; Dockerfile&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What do we want to put into our Dockerfile? Let&#39;s keep things simple for now and let&#39;s say that we want to create a container that just run &lt;code&gt;npm&lt;/code&gt;.  To achieve this, this is what we can write into our &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; debian:buster&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install nodejs npm -y&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CMD&lt;/span&gt; [&lt;span class=&quot;token string&quot;&gt;&#39;npm&#39;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, let&#39;s stop for a second... there&#39;s a lot to unpack here!&lt;/p&gt;
&lt;p&gt;The first thing that we can see is that a &lt;code&gt;Dockerfile&lt;/code&gt; is a file with a specific syntax. It is somewhat similar to a Bash script, but there&#39;s also something different about it...&lt;/p&gt;
&lt;p&gt;The order of lines is important and every line starts with a keyword that defines the type of instruction: in our example, &lt;code&gt;FROM&lt;/code&gt;, &lt;code&gt;RUN&lt;/code&gt; and &lt;code&gt;CMD&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM&lt;/code&gt; is generally the first line of any &lt;code&gt;Dockerfile&lt;/code&gt; and it is used to define which &lt;em&gt;base image&lt;/em&gt; do we want to extend. A base image provides a sort of a starting point that can make our life easier. For instance, here by specifying &lt;code&gt;debian:buster&lt;/code&gt;, we are inheriting all the binaries and libraries that can be found in the &lt;em&gt;Buster&lt;/em&gt; version of &lt;em&gt;Debian&lt;/em&gt;. This includes the package manager &lt;code&gt;apt&lt;/code&gt; that we can use to install additional software.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RUN&lt;/code&gt; is used to run some scripting. This is generally done to install additional software, create configuration files, generate keys, download remote resources, etc. You can see &lt;code&gt;RUN&lt;/code&gt; instructions as provisioning steps, in other words, instructions you need to run to configure your image. It is quite common to have multiple &lt;code&gt;RUN&lt;/code&gt; instructions in a &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD&lt;/code&gt; generally appears only once per &lt;code&gt;Dockerfile&lt;/code&gt; and it indicates which command should be executed when the container runs. In our case, we are using it to specify that we want &lt;code&gt;npm&lt;/code&gt; to be executed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are other commands like &lt;code&gt;ENV&lt;/code&gt; (define environment variables) and &lt;code&gt;COPY&lt;/code&gt; (copy a file from your system into the image), but providing a comprehensive guide on how to write a &lt;code&gt;Dockerfile&lt;/code&gt; goes beyond the scope of this article. If you want to find out more, check out the &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot;&gt;official &lt;code&gt;Dockerfile&lt;/code&gt; reference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ok, now that we have defined our &lt;code&gt;Dockerfile&lt;/code&gt;, how do we build a container image?&lt;/p&gt;
&lt;p&gt;That&#39;s easy, we just need to execute &lt;code&gt;docker build .&lt;/code&gt; (where &lt;code&gt;.&lt;/code&gt; means &amp;quot;look for a &lt;code&gt;Dockerfile&lt;/code&gt; in the current folder). We can also give a name to our image by using tags, so the final command we want to execute is actually going to look like this:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; build &lt;span class=&quot;token parameter variable&quot;&gt;-t&lt;/span&gt; demo-docker/npmdemo &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this command we are &amp;quot;tagging&amp;quot; our image with the name &lt;code&gt;demo-docker/npmdemo&lt;/code&gt;. We can use this name later to run our container.&lt;/p&gt;
&lt;p&gt;So ok, let&#39;s run the container then!&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run demo-docker/npmdemo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If everything went as expected we should see the following output:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Usage: npm &lt;command /&gt;

where &lt;command /&gt; is one of:
    access, adduser, audit, bin, bugs, c, cache, ci, cit,
    clean-install, clean-install-test, completion, config,
    create, ddp, dedupe, deprecate, dist-tag, docs, doctor,
    edit, explore, fund, get, help, help-search, hook, i, init,
    install, install-ci-test, install-test, it, link, list, ln,
    login, logout, ls, org, outdated, owner, pack, ping, prefix,
    profile, prune, publish, rb, rebuild, repo, restart, root,
    run, run-script, s, se, search, set, shrinkwrap, star,
    stars, start, stop, t, team, test, token, tst, un,
    uninstall, unpublish, unstar, up, update, v, version, view,
    whoami

npm &lt;command /&gt; -h  quick help on &lt;command /&gt;
npm -l            display full usage info
npm help &lt;term&gt;   search for help on &lt;term&gt;
npm help npm      involved overview

...&lt;/term&gt;&lt;/term&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After showing this output, the container is stopped (simply because &lt;code&gt;npm&lt;/code&gt; exits after showing the help message) and we are back to our prompt.&lt;/p&gt;
&lt;p&gt;Remember that we specified in our &lt;code&gt;CMD&lt;/code&gt; instruction that we just wanted to run &lt;code&gt;npm&lt;/code&gt; at container start? This is why we are seeing the &lt;code&gt;npm&lt;/code&gt; help message when we start the container. What if we want to run the container again but this time we want to run a different command? Can we override the default command? We can easily do that! For instance, we can run the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run demo-docker/npmdemo &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--version&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you might expect, this is going to print something like this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;6.14.11&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know this is not super useful just yet! But hold on for few other minutes so we can discuss why you might want to use Docker in your team. After that, we will actually go building a Docker image for a Node.js HTTP server! I promise that will be interesting :)&lt;/p&gt;
&lt;h2 id=&quot;why-docker-and-docker-compose-can-help-you-and-your-team&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Why Docker and Docker Compose can help you and your team&lt;/h2&gt;
&lt;p&gt;Any active project will be constantly updated with new features, bug fixes or security patches. This is true for our project as well for the dependencies of our project. Of course, it is desirable to keep the dependencies of our project as much up to date as possible. But, inevitably, different projects might end up using different versions of the same dependency.&lt;/p&gt;
&lt;p&gt;Keep in mind that, when we talk about dependencies, we don&#39;t mean only libraries but also other systems the project relies on, like a database. Let&#39;s take for example MySQL. In 2021 it is common to see project using &lt;strong&gt;MySQL 5.6, MySQL 5.7&lt;/strong&gt; or &lt;strong&gt;MySQL 8&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now, if we are working on multiple projects that require different versions of MySQL, how can we manage different versions of MySQL in our development machines? Is it always possible to switch from one version to another without messing up our configuration or corrupting the data?&lt;/p&gt;
&lt;p&gt;With Docker you can avoid to spend hours to find a solution to this problem and run your entire stack on containers. Different projects can run locally by spinning up a different MySQL container and since every container is isolated, you won&#39;t have any issue when switching from one project to another: you won&#39;t accidentally corrupt MySQL configuration or its data.&lt;/p&gt;
&lt;p&gt;So, the idea is to use Docker to manage every single &amp;quot;process&amp;quot; that is needed to run your application. Every process will run in its own container. For instance, in a regular web application, you might have a container for the web server process and a container for the database.&lt;/p&gt;
&lt;p&gt;To manage and integrate many containers together, Docker offers a utility called Docker Compose. Docker Compose looks for a file called &lt;code&gt;docker-compose.yml&lt;/code&gt; where you can define all the necessary configuration and containers you want to run for your project.&lt;/p&gt;
&lt;p&gt;If you work in a team, you don&#39;t have to agree in advance on every single configuration detail with your teammates or make sure that everyone has exactly the same setup. In fact, with Docker compose, you can just share the &lt;code&gt;docker-compose.yml&lt;/code&gt; configuration as part of your project and Docker will take care to spin up the same containers in every machine.&lt;/p&gt;
&lt;p&gt;At any point in time, if someone on the team decides to update a dependency or introduce a new dependency, they will do so by updating the &lt;code&gt;docker-compose.yml&lt;/code&gt; and everyone else will easily be able to get the latest changes.&lt;/p&gt;
&lt;p&gt;Even if you have a new joiner in the team, they don&#39;t have to understand and install all the necessary dependencies one by one, they can simply install Docker rely on the latest version of &lt;code&gt;docker-compose.yml&lt;/code&gt; to run the project on their development machine.&lt;/p&gt;
&lt;p&gt;This is one of the main advantages that you can get by using Docker and Docker Compose for development.&lt;/p&gt;
&lt;p&gt;Let&#39;s now see an example of a &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;################################################################################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# SERVICES&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;################################################################################&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# ------------------------------------------------------------&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# MySQL Database&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# ------------------------------------------------------------&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;mysqlserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; myproject_mysql
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; mysql&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5.7&lt;/span&gt;

    &lt;span class=&quot;token key atrule&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;docker&quot;&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;MYSQL_USER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;local&quot;&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;local&quot;&lt;/span&gt;

    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# ---- Format: ----&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# HOST-DIRECTORY : DOCKER-DIRECTORY&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;MYSQL_BACKUP_FOLDER&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/backup/

    &lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;app_net&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;ipv4_address&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;IP_MYSQL_SERVER&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;################################################################################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# NETWORK&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;################################################################################&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;app_net&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bridge
    &lt;span class=&quot;token key atrule&quot;&gt;ipam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; default
      &lt;span class=&quot;token key atrule&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;token key atrule&quot;&gt;subnet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;IP_SUBNET&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is inside this this file?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;services&lt;/code&gt; : this is the list of the containers (and their settings) that we want to run in our project&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysqlserver&lt;/code&gt; : the name of the service. This name is used when you use &lt;code&gt;docker-compose&lt;/code&gt; command and you want to refer to this specific service (container).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;container_name&lt;/code&gt; : overrides the default alias of the container. It&#39;s a good practice to use something like &lt;code&gt;&amp;lt;name of the project&amp;gt;_&amp;lt;name of the service&amp;gt;&lt;/code&gt; to avoid conflict with other projects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;image&lt;/code&gt; : the name of the Docker image that we want to use (as defined in the Docker registry).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt; : environment variables used inside the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volumes&lt;/code&gt; : shared folder between your computer and the container. You can crate a mapping of your destination folder even if doesn&#39;t exist. In our example we map our backup folder with &lt;code&gt;/backup&lt;/code&gt; folder inside the container. Very useful if we want to crate a standard script for restoring the data into the database (e.g. standard seed data shared across devs).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;networks&lt;/code&gt; : add specific ipv4 IP to our container. Setting up a specific IP for your container (service) is very useful when you have to work with different projects or you want to create local DNS aliases for your project.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;networks → app_net → driver: bridge&lt;/code&gt; this is a default configuration to allow the container to connect to the internet through the host system. The name &lt;code&gt;app_net&lt;/code&gt; is a the name we want to give to the Docker network, so you can name it wathever makes sense to you. Refer to the &lt;a href=&quot;https://docs.docker.com/compose/networking/#specify-custom-networks&quot;&gt;official documentation on custom networks&lt;/a&gt; for more information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let&#39;s see our &lt;code&gt;.env&lt;/code&gt; file that we are going to use to store the enviornment variables needed for this project:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;################################################################################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;### MySQL Settings&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;################################################################################&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_BACKUP_FOLDER&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/user/backup_db/project_x/

&lt;span class=&quot;token comment&quot;&gt;################################################################################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;### IP Settings&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;################################################################################&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;IP_SUBNET&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;172.16&lt;/span&gt;.250.0/24
&lt;span class=&quot;token assign-left variable&quot;&gt;IP_LOCAL_COMPUTER&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;172.16&lt;/span&gt;.250.1
&lt;span class=&quot;token assign-left variable&quot;&gt;IP_MYSQL_SERVER&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;172.16&lt;/span&gt;.250.11&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not always necessary to use an &lt;code&gt;.env&lt;/code&gt; file, especially in simple examples like this one. It is a good practice to use one, though. The main advantage is when you have to share the &lt;code&gt;docker-compose.yml&lt;/code&gt; and the &lt;code&gt;.env&lt;/code&gt; with the team.&lt;/p&gt;
&lt;p&gt;Generally the &lt;code&gt;.env&lt;/code&gt; file is not committed to the repository. The idea is to use it to provide &amp;quot;user specific&amp;quot; configuration, so every member of the team can choose your own range of IPs or reference their own work folders.&lt;/p&gt;
&lt;p&gt;Let&#39;s see an example. If we add in &lt;code&gt;docker-compose&lt;/code&gt; a service for Node.js we can add some &amp;quot;link&amp;quot; to other services.
(official docker documentation: &lt;a href=&quot;https://docs.docker.com/compose/compose-file/compose-file-v3/#extra_hosts&quot;&gt;https://docs.docker.com/compose/compose-file/compose-file-v3/#extra_hosts&lt;/a&gt;)&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;# ------------------------------------------------------------&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# Node.js Server&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# ------------------------------------------------------------&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;nodejs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;

        &lt;span class=&quot;token key atrule&quot;&gt;extra_hosts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; mysql&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;IP_MYSQL_SERVER&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;extra_hosts&lt;/code&gt; we can add all entries that are stored in our &lt;code&gt;/etc/hosts&lt;/code&gt; file so we can create &amp;quot;custom domain&amp;quot; via local configuration without have a real domain.&lt;/p&gt;
&lt;p&gt;In this specific case in our Node.js app we can refer to mysql server not via IP but via &amp;quot;mysql-server-service&amp;quot; name.&lt;/p&gt;
&lt;p&gt;Let&#39;s go back to our docker-compose file. At this point we can run &lt;code&gt;docker-compose&lt;/code&gt; to start all the docker services specified in our project:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker-compose&lt;/span&gt; up &lt;span class=&quot;token parameter variable&quot;&gt;-d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the &lt;code&gt;-d&lt;/code&gt; option will start all the services in background.&lt;/p&gt;
&lt;p&gt;After a few seconds, all our services should be running. So let&#39;s see, for example, how we can access the MySQL shell and run a query:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker-compose&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; mysqlserver /bin/bash
root@2f88599b3b1f:/&lt;span class=&quot;token comment&quot;&gt;# mysql -u root -pdocker (...enter root password)&lt;/span&gt;
mysql&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; SHOW DATABASES&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First of all: we need to &amp;quot;open&amp;quot; a bash shell inside the container so we can run any command. We can do that with: &lt;code&gt;docker-compose exec mysqlserver /bin/bash&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These are the arguments of this &lt;code&gt;docker-compose&lt;/code&gt; command:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt; : Docker searches for a running container (with the name &lt;code&gt;mysqlserver&lt;/code&gt;) to run a given command. If you don&#39;t run &lt;code&gt;docker-compose up -d&lt;/code&gt; before, this command will fail.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/bin/bash&lt;/code&gt; : is the name of the command we want to run inside the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we are &amp;quot;inside&amp;quot; the container we can do anything we want. In this case we want open a mysql terminal, so we run &lt;code&gt;mysql -u root -pdocker&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that the root password is defined by environment variable &lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;create-and-configure-a-node.js-project-with-docker&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Create and configure a Node.js project with Docker&lt;/h2&gt;
&lt;p&gt;Based on the complexity of the project we might decide to use Docker directly one or more containers or to rely on Docker Compose to orchestrate multiple containers.&lt;/p&gt;
&lt;p&gt;Let&#39;s take a look at this simple &amp;quot;Hello World&amp;quot; web server (file &lt;code&gt;app.js&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; http &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;http&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hostname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;0.0.0.0&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4040&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; server &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;text/plain&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; hostname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Server running at http://&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;hostname&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing particularly complicated here, we are simply creating a web server that responds to every request with an &amp;quot;Hello World!&amp;quot;.&lt;/p&gt;
&lt;p&gt;But pay special attention to &lt;code&gt;hostname&lt;/code&gt;! With docker you can have connectivity problems if you use &lt;code&gt;&amp;quot;localhost&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/code&gt;, because it refers to the docker container and not to your local machine, therefore the container will only listen for connections from inside the container itself. It&#39;s better to use use &lt;code&gt;&amp;quot;0.0.0.0&amp;quot;&lt;/code&gt; or directly the ip associated to the container so that we can issue requests from our local machine or from other containers.&lt;/p&gt;
&lt;h3 id=&quot;work-with-docker-directly-(no-configuration-file)&quot; tabindex=&quot;-1&quot; class=&quot;title is-3&quot;&gt;Work with Docker directly (no configuration file)&lt;/h3&gt;
&lt;p&gt;To start this application with Docker, we don&#39;t necessarily need to create a &lt;code&gt;Dockerfile&lt;/code&gt;  or a &lt;code&gt;docker-compose.yml&lt;/code&gt;. We can simply run (in the same folder of &lt;code&gt;app.js&lt;/code&gt;) the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
  &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
  &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;4040:4040&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
  &lt;span class=&quot;token parameter variable&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;}&lt;/span&gt;:/home/node/project &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
  node:14 &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; /home/node/project/app.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point we should be able to connect to our web server using a browser by simply visiting &lt;code&gt;http://127.0.01:4040&lt;/code&gt;.&lt;/p&gt;
&lt;span style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 600px; &quot;&gt;
&lt;picture&gt;
  &lt;source type=&quot;image/png&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/node-js-hello-world-http-server-from-browser-yCAvls1S5S-64.png 64w, https://www.nodejsdesignpatterns.com/img/node-js-hello-world-http-server-from-browser-yCAvls1S5S-128.png 128w, https://www.nodejsdesignpatterns.com/img/node-js-hello-world-http-server-from-browser-yCAvls1S5S-256.png 256w, https://www.nodejsdesignpatterns.com/img/node-js-hello-world-http-server-from-browser-yCAvls1S5S-512.png 512w, https://www.nodejsdesignpatterns.com/img/node-js-hello-world-http-server-from-browser-yCAvls1S5S-564.png 564w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot; /&gt;
&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/node-js-hello-world-http-server-from-browser-yCAvls1S5S-64.webp 64w, https://www.nodejsdesignpatterns.com/img/node-js-hello-world-http-server-from-browser-yCAvls1S5S-128.webp 128w, https://www.nodejsdesignpatterns.com/img/node-js-hello-world-http-server-from-browser-yCAvls1S5S-256.webp 256w, https://www.nodejsdesignpatterns.com/img/node-js-hello-world-http-server-from-browser-yCAvls1S5S-512.webp 512w, https://www.nodejsdesignpatterns.com/img/node-js-hello-world-http-server-from-browser-yCAvls1S5S-564.webp 564w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot; /&gt;
&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;A simple Node.js web server seen from the browser&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/node-js-hello-world-http-server-from-browser-yCAvls1S5S-64.png&quot; width=&quot;64&quot; height=&quot;18&quot; /&gt;
&lt;/picture&gt;
&lt;/span&gt;
&lt;p&gt;Let&#39;s discuss in more detail what&#39;s happening when we run the command above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt; means &amp;quot;destroy the container once it is stopped&amp;quot;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;  maps a port of your pc to a port in the container (in this case we are saying map the local port &lt;code&gt;4040&lt;/code&gt; to the port &lt;code&gt;4040&lt;/code&gt; inside the container).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt; stands for &amp;quot;volume&amp;quot; and it is used to map the folder (&lt;code&gt;$PWD&lt;/code&gt;) in the development machine to the &lt;code&gt;/home/node/project&lt;/code&gt; folder inside the container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node:14&lt;/code&gt;  is the name and version of the docker image we want to use (this comes from the &lt;a href=&quot;https://hub.docker.com/&quot;&gt;official Docker Registry&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node /home/node/project/app.js&lt;/code&gt; is the command we want to run once the container starts. We are simply executing &lt;code&gt;node&lt;/code&gt; and running our app file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that &lt;code&gt;/home/node/project/app.js&lt;/code&gt; refers to the mapping of the local folder to  volume in the container. Remember that Docker runs isolated processes, so by default they don&#39;t have access to our filesystem and we can only share files by explicitly defining and attaching volumes to running containers.&lt;/p&gt;
&lt;h3 id=&quot;work-with-docker-compose.yml-and-the-docker-compose-command&quot; tabindex=&quot;-1&quot; class=&quot;title is-3&quot;&gt;Work with docker-compose.yml and the docker-compose command&lt;/h3&gt;
&lt;p&gt;Let&#39;s now look at doing the same thing but with a different approach. By using an &lt;code&gt;.env&lt;/code&gt; file, a  &lt;code&gt;docker-compose.yml&lt;/code&gt; file and &lt;code&gt;docker-compose&lt;/code&gt;, we can define all the necessary settings there so we can keep our command line as lean as possible.&lt;/p&gt;
&lt;p&gt;This is how we can define our &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3&#39;&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;nodejs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;COMPOSE_PROJECT_NAME&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;_$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;NODEJS_SERVER_NAME&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;NODEJS_CONTAINER_IMAGE&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;NODEJS_USER&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;NODEJS_COMMAND&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;4040:4040&quot;&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;NODEJS_ENV&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;PWD&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/home/node/project
        &lt;span class=&quot;token key atrule&quot;&gt;working_dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /home/node/project
        &lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;app_net&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token key atrule&quot;&gt;ipv4_address&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;IP_NODE_SERVER&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;app_net&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bridge
        &lt;span class=&quot;token key atrule&quot;&gt;ipam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token key atrule&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; default
            &lt;span class=&quot;token key atrule&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;token key atrule&quot;&gt;subnet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;IP_SUBNET&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is how we can define our &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;COMPOSE_PROJECT_NAME&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;nodetest
&lt;span class=&quot;token assign-left variable&quot;&gt;NODEJS_CONTAINER_IMAGE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;node:14
&lt;span class=&quot;token assign-left variable&quot;&gt;NODEJS_SERVER_NAME&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;nodejs
&lt;span class=&quot;token assign-left variable&quot;&gt;NODEJS_USER&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;node
&lt;span class=&quot;token assign-left variable&quot;&gt;NODEJS_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;development
&lt;span class=&quot;token assign-left variable&quot;&gt;NODEJS_COMMAND&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;node app.js
&lt;span class=&quot;token assign-left variable&quot;&gt;IP_SUBNET&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;172.16&lt;/span&gt;.250.0/24
&lt;span class=&quot;token assign-left variable&quot;&gt;IP_LOCAL_COMPUTER&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;172.16&lt;/span&gt;.250.1
&lt;span class=&quot;token assign-left variable&quot;&gt;IP_NODE_SERVER&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;172.16&lt;/span&gt;.250.10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point we just need to run &lt;code&gt;docker-compose up&lt;/code&gt; and we should have the same result as the command described before.&lt;/p&gt;
&lt;p&gt;If you want to run in background mode (so you can close the terminal) just add &lt;code&gt;-d&lt;/code&gt; to the command like &lt;code&gt;docker-compose up -d&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want to change something like node version, just edit the &lt;code&gt;.env&lt;/code&gt; file in the same folder and done!&lt;/p&gt;
&lt;p&gt;Once you are finished working on the project and you want to stop the containers, you can simply run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker-compose&lt;/span&gt; down&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;pros-and-cons-of-using-docker-with-node.js&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Pros and cons of using Docker with Node.js&lt;/h2&gt;
&lt;p&gt;It might seem that Docker is like magic for your project but, as with many things, &amp;quot;all that glitters is not gold&amp;quot;. Of course, Docker is great, but it can have its fair share of unexpected &amp;quot;surprises&amp;quot; that can be tedious to resolve.&lt;/p&gt;
&lt;p&gt;Let&#39;s conclude this article, by discussing some of the main pros and cons of using Docker for Node.js development.&lt;/p&gt;
&lt;h3 id=&quot;pros&quot; tabindex=&quot;-1&quot; class=&quot;title is-3&quot;&gt;PROS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You can manage multiple version of Node.js without having to install all of them or needing complicated setup to be able to switch version on demand.&lt;/li&gt;
&lt;li&gt;You can use different version of Node.js at the same time. Imagine you have a microservice-oriented architecture and 2 different services need to use 2 different versions of Node.js!&lt;/li&gt;
&lt;li&gt;It is easier to share a consistent setup with the members of your team. Docker becomes the only shared dependency that needs to be pre-installed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cons&quot; tabindex=&quot;-1&quot; class=&quot;title is-3&quot;&gt;CONS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;For small projects running only one monolithic service setting up Docker and Docker Compose can be a bit of over-engineering.&lt;/li&gt;
&lt;li&gt;With more advanced projects, you might need to setup some bash scripts to run some Docker command (because they might be long and difficult to remember).&lt;/li&gt;
&lt;li&gt;For Mac OS and Windows you can have some setup problems and degraded performances because Docker is not running natively in these platforms.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&#39;s all! Hopefully you found this article interesting and you will decide to give Docker a shot for your Node.js development.&lt;/p&gt;
&lt;p&gt;You can check out the code examples in the following repository: &lt;a href=&quot;https://github.com/giuseppemorelli/docker-node-example&quot;&gt;https://github.com/giuseppemorelli/docker-node-example&lt;/a&gt;. If you liked this article, please consider giving it a star, everyone needs some vanity metrics, after all! :)&lt;/p&gt;
&lt;h2 id=&quot;about-the-author&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;About the author&lt;/h2&gt;
&lt;p&gt;Giuseppe Morelli is the guest author of this post. This is Giuseppe&#39;s bio.&lt;/p&gt;
&lt;p&gt;Since I was a baby I came to love technology and programming. Today I am a remote worker for Italian and European companies. I like to work with Agile and Time-Material practices.
I have been a PHP Developer by trade since 2006, and I am particularly experienced with e-commerce development. Every day I try to learn something new by being a part of the open-source community. In 2020 I&#39;ve started to study Node.js by reading Mario and Luciano&#39;s book  :)&lt;/p&gt;
&lt;p&gt;If you want to connect with me, check out &lt;a href=&quot;https://giuseppemorelli.net/&quot;&gt;my personal website&lt;/a&gt; or my &lt;a href=&quot;https://twitter.com/giuseppemorelli&quot;&gt;Twitter account&lt;/a&gt;.&lt;/p&gt;
</content>
    </entry>
    
    <entry>
      <title>JavaScript async iterators</title>
      <link href="https://www.nodejsdesignpatterns.com/blog/javascript-async-iterators/"/>
      <updated>2021-05-04T13:10:00Z</updated>
      <id>https://www.nodejsdesignpatterns.com/blog/javascript-async-iterators/</id>
      <content type="html">&lt;p&gt;Did you know that JavaScript offers a few protocols to allow iteration over certain objects? Of course, we know we can easily iterate over arrays, but with these protocols, you can make your own custom objects iterable as well.&lt;/p&gt;
&lt;p&gt;When you have an iterable object representing a collection, you can use the &lt;code&gt;for...of&lt;/code&gt; syntax to iterate over every single item of the collection.&lt;/p&gt;
&lt;p&gt;But what if an object abstracts data generated asynchronously? For instance, think of an abstraction that allows us to fetch data from a paginated API, or think about some records consumed in batches from a database, or something as simple as a countdown timer. Well in these cases you can use the &lt;code&gt;for await...of&lt;/code&gt; syntax!&lt;/p&gt;
&lt;p&gt;In this article, we will learn more about the &lt;em&gt;iterator&lt;/em&gt; and the &lt;em&gt;iterable&lt;/em&gt; protocol (and their async counterparts) and we will see how to create custom objects that can expose their internal data in an ergonomic and idiomatic way.&lt;/p&gt;
&lt;h2 id=&quot;javascript-iteration-with-for...of&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;JavaScript iteration with &lt;code&gt;for...of&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;With ECMAScript 2015, JavaScript got the &lt;code&gt;for...of&lt;/code&gt; syntax. This syntax provides a very easy way to iterate over collections, such as arrays, string, sets, and maps.&lt;/p&gt;
&lt;p&gt;If you have never seen this syntax in action here are some examples:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; judokas &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;Driulis Gonzalez Morales&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;Ilias Iliadis&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;Tadahiro Nomura&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;Anton Geesink&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;Teddy Riner&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;Ryoko Tani&#39;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; judoka &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; judokas&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;judoka&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above, we are iterating over an array using the &lt;code&gt;for...of&lt;/code&gt; syntax. If we run this code, this is what we will get as output:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Driulis Gonzalez Morales
Ilias Iliadis
Tadahiro Nomura
Anton Geesink
Teddy Riner
Ryoko Tani&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same syntax works also for iterating over the characters of a string:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; judoka &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Ryoko Tani&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; char &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; judoka&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;char&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above will print:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;R
y
o
k
o

T
a
n
i&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can even use this for &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; medals &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;gold&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;silver&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bronze&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; medal &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; medals&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;medal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is going to output:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gold
silver
bronze&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Map&lt;/code&gt; is especially interesting because we can use &lt;em&gt;destructuring&lt;/em&gt; to iterate over key-value pairs:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; medallists &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Teddy Riner&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Driulis Gonzalez Morales&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Ryoko Tani&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Ilias Iliadis&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;judoka&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; medals&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; medallists&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;judoka&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; has won &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;medals&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; medals&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example will output:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Teddy Riner has won 33 medals
Driulis Gonzalez Morales has won 16 medals
Ryoko Tani has won 16 medals
Ilias Iliadis has won 15 medals&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, if you want to iterate over the key-value pairs of an object literal using the &lt;code&gt;for...of&lt;/code&gt; syntax, we can do that by using the helper &lt;code&gt;Object.entries&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; medallists &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;Teddy Riner&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;Driulis Gonzalez Morales&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;Ryoko Tani&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string-property property&quot;&gt;&#39;Ilias Iliadis&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;judoka&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; medals&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;medallists&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;judoka&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; has won &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;medals&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; medals&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code snippet above will produce the same output as the previous example.&lt;/p&gt;
&lt;p&gt;What&#39;s interesting here is that, if we try to use the &lt;code&gt;for...of&lt;/code&gt; syntax directly on the object &lt;code&gt;medallists&lt;/code&gt; (without &lt;code&gt;Object.entries&lt;/code&gt;), we get the following error:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;for (const [judoka, medals] of medallists) {
                               ^

TypeError: medallists is not iterable
    at Object.&lt;anonymous&gt; (.../05-for-of-object.js:8:32)
    at Module._compile (node:internal/modules/cjs/loader:1108:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1137:10)
    at Module.load (node:internal/modules/cjs/loader:988:32)
    at Function.Module._load (node:internal/modules/cjs/loader:828:14)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:76:12)
    at node:internal/main/run_main_module:17:47&lt;/anonymous&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s read this error once again: &lt;code&gt;medallists is not iterable&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Yeah, the error is clear: a regular JavaScript object is not &lt;em&gt;iterable&lt;/em&gt;, while arrays, strings, maps, and sets are!&lt;/p&gt;
&lt;p&gt;But what does it mean for an object to be &lt;em&gt;iterable&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;During the rest of this article, we will learn how JavaScript knows if a given object is &lt;strong&gt;iterable&lt;/strong&gt; and how we can make our own custom &lt;em&gt;iterable&lt;/em&gt; objects.&lt;/p&gt;
&lt;p&gt;But first let&#39;s quickly take a look at how we can use async iterators.&lt;/p&gt;
&lt;h2 id=&quot;javascript-iteration-with-for-await...of&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;JavaScript iteration with &lt;code&gt;for await...of&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;ECMAScript 2018 introduced a new syntax called &lt;code&gt;for await...of&lt;/code&gt;. This syntax is somewhat similar to &lt;code&gt;for...of&lt;/code&gt; but it allows us to iterate over &lt;em&gt;asynchronous collections&lt;/em&gt; where data becomes available over time in an asynchronous fashion.&lt;/p&gt;
&lt;p&gt;A good use case for this syntax is reading data from a remote source like a database.&lt;/p&gt;
&lt;p&gt;Here&#39;s an example that uses AWS DynamoDB and the &lt;code&gt;for await...of&lt;/code&gt; syntax to list all the tables available in our account:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; DynamoDBClient&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; paginateListTables &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;@aws-sdk/client-dynamodb&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DynamoDBClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;paginateListTables&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; client &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// page.TableNames is an array of table names&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tableName &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TableNames&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tableName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above, &lt;code&gt;paginateListTables&lt;/code&gt; will &lt;em&gt;produce&lt;/em&gt; pages over time, and every page will contain a portion of the data (information about all the available tables).&lt;/p&gt;
&lt;p&gt;This approach allows us to list hundreds or even thousands of table names efficiently. In fact, the data can be printed as soon as it is available and we don&#39;t have to wait for the entire data set to be received.&lt;/p&gt;
&lt;p&gt;Note how we are combining here &lt;code&gt;for await...of&lt;/code&gt; and &lt;code&gt;for...of&lt;/code&gt;. Pages become available over time asynchronously, so we need to use &lt;code&gt;for await...of&lt;/code&gt; to iterate over this data. Every page contains an array of table names, so in this case, to iterate over every single table name we can simply use &lt;code&gt;for...of&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In general, we can use the &lt;code&gt;for await...of&lt;/code&gt; syntax with objects that are &lt;strong&gt;async iterable&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the next few sections, we will see how JavaScript classifies a given object as &lt;em&gt;async iterable&lt;/em&gt; and how we can build our custom &lt;em&gt;async iterable&lt;/em&gt; objects.&lt;/p&gt;
&lt;h2 id=&quot;the-javascript-iterator-protocol&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;The JavaScript iterator protocol&lt;/h2&gt;
&lt;p&gt;JavaScript defines a number of protocols that are used to make objects iterable (or async iterable).&lt;/p&gt;
&lt;p&gt;The first one we are going to start with is the &lt;strong&gt;iterator protocol&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In JavaScript, an object is &lt;strong&gt;an iterator&lt;/strong&gt; if it has a &lt;code&gt;next()&lt;/code&gt; method. Every time you call it, it returns an object with the keys &lt;code&gt;done&lt;/code&gt; (boolean) and &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&#39;s see an example. Let&#39;s say we want to build a countdown. This countdown is initialized with a positive integer and it will produce all the numbers from that value down to &lt;code&gt;0&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createCountdown&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; nextVal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; from
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextVal &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;token literal-property property&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; nextVal&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, &lt;code&gt;createCountdown&lt;/code&gt; is a simple factory function. From this function, we return an &lt;em&gt;iterator&lt;/em&gt; object. In fact, the object implements the &lt;em&gt;iterator protocol&lt;/em&gt; defined above. Note that the returned object implements a &lt;code&gt;next()&lt;/code&gt; method and that this method returns either &lt;code&gt;{done: true}&lt;/code&gt; or &lt;code&gt;{done: false, value: someNumber}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&#39;s see now how can we use this object to extract all the values:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; countdown &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createCountdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { done: false, value: 3 }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { done: false, value: 2 }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { done: false, value: 1 }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { done: false, value: 0 }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { done: true }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or if we want to use this object with a more generic loop:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; countdown &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createCountdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above will produce the following output:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;3
2
1
0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is not the most intuitive or ergonomic approach, but the iterator protocol is the basic building block for the &lt;em&gt;iterable protocol&lt;/em&gt; which enables the &lt;code&gt;for...of&lt;/code&gt; syntax.&lt;/p&gt;
&lt;h2 id=&quot;the-javascript-iterable-protocol&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;The JavaScript iterable protocol&lt;/h2&gt;
&lt;p&gt;As we said, the &lt;em&gt;iterable protocol&lt;/em&gt; builds on top of the &lt;em&gt;iterator protocol&lt;/em&gt; that we just explored. Let&#39;s see how:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An object is &lt;strong&gt;iterable&lt;/strong&gt; if it implements the &lt;code&gt;@@iterator&lt;/code&gt; method, a zero-argument function that &lt;strong&gt;returns an iterator&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that with &lt;code&gt;@@iterator&lt;/code&gt; we indicate a symbol that is accessed with the global value &lt;code&gt;Symbol.iterator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Can we make our countdown example &lt;em&gt;iterable&lt;/em&gt;? We certainly can!&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createCountdown&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; nextVal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; from
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;iterator&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextVal &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; nextVal&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this new example, our factory function returns an &lt;em&gt;iterable&lt;/em&gt; object. This object in fact has a method referenced with &lt;code&gt;Symbol.iterator&lt;/code&gt; that returns an &lt;em&gt;iterator&lt;/em&gt; object.&lt;/p&gt;
&lt;p&gt;At this point, once we have an instance of a countdown, we can use the &lt;code&gt;for..of&lt;/code&gt; syntax to iterate over all the numbers from the countdown:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; countdown &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createCountdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; value &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; countdown&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The example above will output:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;3
2
1
0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hooray! Now we know how to make iterators and iterable objects. If you find the two terms confusing, don&#39;t worry, that&#39;s quite common!&lt;/p&gt;
&lt;p&gt;One good way to try to remember and distinguish these 2 concepts is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An &lt;em&gt;iterator&lt;/em&gt; is a lower-level object that allows us to iterate over some data set using &lt;code&gt;next()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;An &lt;em&gt;iterable&lt;/em&gt; is an object on which we can iterate over using the &lt;code&gt;for...of&lt;/code&gt; syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;using-javascript-generator-functions&quot; tabindex=&quot;-1&quot; class=&quot;title is-3&quot;&gt;Using JavaScript generator functions&lt;/h3&gt;
&lt;p&gt;An interesting detail is that JavaScript generator functions &lt;em&gt;produce&lt;/em&gt; iterators.&lt;/p&gt;
&lt;p&gt;This allows us to simplify the way we can implement both the &lt;em&gt;iterator&lt;/em&gt; and the &lt;em&gt;iterable&lt;/em&gt; protocols.&lt;/p&gt;
&lt;p&gt;Let&#39;s see how can we rewrite our countdown logic using a generator function:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createCountdown&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; from&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; i
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we call &lt;code&gt;createCountdown(3)&lt;/code&gt; we get an &lt;em&gt;iterator&lt;/em&gt;. So this is perfectly compatible with our previous &lt;em&gt;iterator&lt;/em&gt; implementation:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; countdown &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createCountdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { value: 3, done: false }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { value: 2, done: false }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { value: 1, done: false }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { value: 0, done: false }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { value: undefined, done: true }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, we can use generators to implement the &lt;em&gt;iterable protocol&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createCountdown&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;iterator&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; from&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; i
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this factory will produce iterable objects, exactly as before:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; countdown &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createCountdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; value &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; countdown&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In general, generators can be considered great syntactic sugars to write iterators.&lt;/p&gt;
&lt;h3 id=&quot;the-spread-syntax-for-iterable-objects&quot; tabindex=&quot;-1&quot; class=&quot;title is-3&quot;&gt;The spread syntax for iterable objects&lt;/h3&gt;
&lt;p&gt;Another interesting detail is that all iterable objects can be used with the &lt;em&gt;spread syntax&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The spread syntax looks like &lt;code&gt;...someIterable&lt;/code&gt; and it basically allows us to apply every single element from the iterable to a given context.&lt;/p&gt;
&lt;p&gt;The most common use cases are found with array literals and function calls.&lt;/p&gt;
&lt;p&gt;Let&#39;s see a couple of examples:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; countdown &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createCountdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; from5to0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;countdown&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;from5to0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [ 5, 4, 3, 2, 1, 0 ]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; countdown2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createCountdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;countdown2 data:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;countdown2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// countdown2 data: 6 5 4 3 2 1 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is something we see most often with arrays, but it&#39;s important to note that any iterable object can be used with the spread syntax.&lt;/p&gt;
&lt;h2 id=&quot;the-javascript-async-iterator-protocol&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;The JavaScript async iterator protocol&lt;/h2&gt;
&lt;p&gt;Ok, so far we have explored only synchronous iteration protocols. What about async?&lt;/p&gt;
&lt;p&gt;Unsurprisingly, both the iterator protocol and the iterable protocol have their async counterparts!&lt;/p&gt;
&lt;p&gt;Let&#39;s start with the &lt;strong&gt;async iterator protocol&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An object is an &lt;strong&gt;async iterator&lt;/strong&gt; if it has a &lt;code&gt;next()&lt;/code&gt; method. Every time you call it, it returns &lt;strong&gt;a promise that resolves&lt;/strong&gt; to an object with the keys &lt;code&gt;done&lt;/code&gt; (boolean) and &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note how this is quite similar to the synchronous version of the iterator protocol. The main difference here is that the &lt;code&gt;next()&lt;/code&gt; function won&#39;t return an object straight away. Instead, it will return a promise that will eventually resolve to an object.&lt;/p&gt;
&lt;p&gt;Let&#39;s now revisit our countdown example and let&#39;s say we want some time to pass before numbers are &lt;em&gt;produced&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; setTimeout &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;timers/promises&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createAsyncCountdown&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;from&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; delay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; nextVal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; from
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;delay&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextVal &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; nextVal&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this time we are using an &lt;em&gt;async&lt;/em&gt; function to implement &lt;code&gt;next()&lt;/code&gt;. This will make this method immediately return a promise, that will later resolve when we run one of the &lt;code&gt;return&lt;/code&gt; statements from within the &lt;em&gt;async&lt;/em&gt; function.&lt;/p&gt;
&lt;p&gt;Also, note that here we are using &lt;code&gt;setTimeout&lt;/code&gt; from &lt;code&gt;timers/promises&lt;/code&gt;, a new core module available from Node.js 16.&lt;/p&gt;
&lt;p&gt;Ok, now we are ready to use this iterator:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; countdown &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createAsyncCountdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { done: false, value: 3 }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { done: false, value: 2 }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { done: false, value: 1 }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { done: false, value: 0 }&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; countdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// { done: true }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works very similarly to its synchronous counterpart with two notable exceptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need to use &lt;code&gt;await&lt;/code&gt; to wait for the next element to be produced.&lt;/li&gt;
&lt;li&gt;Between one element and another about 1 second will pass, so this iteration is much slower.&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;An example of JavaScript async iterator&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/javascript-async-iterator-countdown_fe19a712.gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Of course, here we can use generators as well as a nice syntactic sugar:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; setTimeout &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;timers/promises&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createAsyncCountdown&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;from&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; delay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; from&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;delay&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; i
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code is more concise and probably more readable, at least to those accustomed to async functions and generator functions.&lt;/p&gt;
&lt;h2 id=&quot;the-javascript-async-iterable-protocol&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;The JavaScript async iterable protocol&lt;/h2&gt;
&lt;p&gt;Let&#39;s now discuss the last iteration protocol: the &lt;em&gt;async iterable protocol&lt;/em&gt;!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An object is an &lt;strong&gt;async iterable&lt;/strong&gt; if it implements the &lt;code&gt;@@asyncIterator&lt;/code&gt; method, a zero-argument function that returns an &lt;strong&gt;async iterator&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that with &lt;code&gt;@@asyncIterator&lt;/code&gt; we indicate a symbol that can be accessed with the global value &lt;code&gt;Symbol.asyncIterator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once again, this definition is quite similar to its synchronous counterpart. The main difference is that this type we have to use &lt;code&gt;Symbol.asyncIterator&lt;/code&gt; and that it must return an &lt;em&gt;async&lt;/em&gt; iterator.&lt;/p&gt;
&lt;p&gt;Let&#39;s revisit our async countdown example:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; setTimeout &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;timers/promises&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createAsyncCountdown&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;from&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; delay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;asyncIterator&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; from&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;delay&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; i
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, our &lt;code&gt;createAsyncCountdown&lt;/code&gt; returns a valid async iterator, so we can finally use the &lt;code&gt;for await...of&lt;/code&gt; syntax:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; countdown &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createAsyncCountdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; value &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; countdown&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you might expect, this code will produce &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; with a delay:&lt;/p&gt;
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;An example of JavaScript async iterator&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/javascript-async-iterable-countdown_6150da48.gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Great!&lt;/p&gt;
&lt;p&gt;At this point, we know how the JavaScript iteration protocol work and how to create iterator and iterable objects in a synchronous and asynchronous fashion!&lt;/p&gt;
&lt;h2 id=&quot;combining-iterator-and-iterable&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Combining iterator and iterable&lt;/h2&gt;
&lt;p&gt;Can an object be both an iterator and an iterable at the same time?&lt;/p&gt;
&lt;p&gt;Yes! Nothing is stopping us from implementing both protocols for a given object. This basically means that &lt;code&gt;@@iterator&lt;/code&gt; or &lt;code&gt;@@asyncIterator&lt;/code&gt; will have to return the same object as in the following example:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; iterableIterator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;iterator&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; value &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; iterableIterator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;hello&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The example above will print &amp;quot;hello&amp;quot; endlessly.&lt;/p&gt;
&lt;p&gt;What&#39;s even cooler is that generator functions are also iterable. This means that we can greatly simplify our countdown examples.&lt;/p&gt;
&lt;p&gt;Let&#39;s see how the syncrhonous countdown would look like:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createCountdown&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; from&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; i
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We don&#39;t even need to bother with &lt;code&gt;Symbol.iterator&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;The same goes for the asynchronous version of our countdown:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; setTimeout &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;timers/promises&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createAsyncCountdown&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;from&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; delay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; from&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;delay&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; i
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here we don&#39;t have to explicitly use &lt;code&gt;Symbol.asyncIterator&lt;/code&gt;, in fact, an async generator function is already an async iterable!&lt;/p&gt;
&lt;p&gt;If we decide to use generators, this will help us to write even more concise iterator and iterable objects.&lt;/p&gt;
&lt;h2 id=&quot;using-javascript-iteration-protocols-with-node.js&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Using JavaScript iteration protocols with Node.js&lt;/h2&gt;
&lt;p&gt;Everything we have been discussing so far is part of the JavaScript specification, but what about Node.js?&lt;/p&gt;
&lt;p&gt;Actually, support for these features looks quite good in Node.js!&lt;/p&gt;
&lt;p&gt;Synchronous iteration protocols have been supported in Node.js for a long time (since Node.js 0.12).&lt;/p&gt;
&lt;p&gt;Recent versions of Node.js (Node.js 10.3) introduced support for async iterators and the &lt;code&gt;for await...of&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;Synchronous iterable objects and the &lt;code&gt;for...of&lt;/code&gt; syntax are quite widespread, so in the next sections, we will focus on providing some examples of how you can take advantage of its asynchronous counterpart and the &lt;code&gt;for await...of&lt;/code&gt; syntax.&lt;/p&gt;
&lt;h3 id=&quot;node.js-readable-streams-and-async-iterators&quot; tabindex=&quot;-1&quot; class=&quot;title is-3&quot;&gt;Node.js readable streams and async iterators&lt;/h3&gt;
&lt;p&gt;One interesting detail that needs a bit more visibility is that Node.js &lt;em&gt;Readable&lt;/em&gt; streams are async iterable objects since Node.js 11.14.&lt;/p&gt;
&lt;p&gt;This basically means that we can consume data from a Readable stream using &lt;code&gt;for await...of&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&#39;s see a simple example of a CLI utility that allows us to read the content of a given file and count the number of bytes:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createReadStream &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sourcePath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sourceStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createReadStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sourcePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; bytes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; chunk &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; sourceStream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  bytes &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; chunk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;bytes&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; bytes&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The interesting thing is that when we are using this approach the stream is consumed in &lt;em&gt;non-flowing&lt;/em&gt; (or &lt;em&gt;paused&lt;/em&gt;) mode which can help us to handle backpressure in a very simple way.&lt;/p&gt;
&lt;p&gt;Let&#39;s say that we want to write every chunk to a very slow transform stream (that we are going to identify with &lt;code&gt;SlowTransform&lt;/code&gt;), this is how we can handle backpressure:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createReadStream &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; once &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;events&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sourcePath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sourceStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createReadStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sourcePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; destStream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SlowTransform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; chunk &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; sourceStream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; canContinue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; destStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chunk&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;canContinue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// backpressure, now we stop and we need to wait for drain&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;destStream&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;drain&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ok now it&#39;s safe to resume writing&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that having an &lt;code&gt;await&lt;/code&gt; inside the &lt;code&gt;for await...of&lt;/code&gt; block will effectively pause the iteration. This will stop consuming data from the source stream until the destination stream is drained.&lt;/p&gt;
&lt;h3 id=&quot;converting-a-node.js-event-emitter-to-an-async-iterable&quot; tabindex=&quot;-1&quot; class=&quot;title is-3&quot;&gt;Converting a Node.js event emitter to an async iterable&lt;/h3&gt;
&lt;p&gt;Another interesting use case for async iteration in Node.js is when dealing with repeated events happening over time.&lt;/p&gt;
&lt;p&gt;Events are generally fired by an &lt;em&gt;event emitter&lt;/em&gt; and, since version 12.16, Node.js offers an interesting utility to convert a sequence of events into an async iterable.&lt;/p&gt;
&lt;p&gt;We can see a simple example by using the third party module &lt;a href=&quot;https://npm.im/glob&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt; which allows us to find files matching a specific glob expression.&lt;/p&gt;
&lt;p&gt;In this example we will find and print all the JavaScript files (&lt;code&gt;.js&lt;/code&gt; extension) in the current folder (and subfolders):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; on &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;events&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; glob &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;glob&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; matcher &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;**/*.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;filePath&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;matcher&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;match&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we are using &lt;code&gt;on(matcher, &#39;match&#39;)&lt;/code&gt; to create an async iterable that will &lt;em&gt;produce&lt;/em&gt; a new value every time the &lt;code&gt;matcher&lt;/code&gt; instance fires a &lt;code&gt;match&lt;/code&gt; event.&lt;/p&gt;
&lt;p&gt;Note that the value produced by this async iterable at every iteration is an array containing all the values contained in the original &lt;code&gt;match&lt;/code&gt; event. This is the reason why we need to use destructuring to extract the &lt;code&gt;filePath&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At this point you might ask: &amp;quot;wait a second, but how do we know, with this approach, when there are no more events to process?&amp;quot;&lt;/p&gt;
&lt;p&gt;And that&#39;s a great question... we don&#39;t!&lt;/p&gt;
&lt;p&gt;In fact, we are only listening for &lt;code&gt;match&lt;/code&gt; events and we don&#39;t really have a way to stop the loop.&lt;/p&gt;
&lt;p&gt;If we put any code just after the &lt;code&gt;for await...of&lt;/code&gt; loop, that code will never be executed.&lt;/p&gt;
&lt;p&gt;One solution to this problem is the &lt;code&gt;AbortController&lt;/code&gt;, which allows us to create an Async Iterable that can be aborted.&lt;/p&gt;
&lt;p&gt;With that, we could listen for the &lt;code&gt;end&lt;/code&gt; event on our &lt;code&gt;matcher&lt;/code&gt; instance and, once that happens, we can use the &lt;code&gt;AbortController&lt;/code&gt; to stop the iteration.&lt;/p&gt;
&lt;p&gt;Let&#39;s see some code:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; on &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;events&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; glob &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;glob&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; matcher &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;**/*.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ac &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;global&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AbortController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

matcher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;end&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; ac&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;filePath&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;matcher&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;match&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ac&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;signal &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;./&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;filePath&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;ac&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;signal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aborted&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;NOW WE GETTING HERE! :)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the code example above, you can see that we are creating a new instance of &lt;code&gt;AbortController&lt;/code&gt; by using &lt;code&gt;new global.AbortController()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, we listen for the &lt;code&gt;end&lt;/code&gt; event on our &lt;code&gt;matcher&lt;/code&gt; and when that happens we invoke &lt;code&gt;abort()&lt;/code&gt; on our &lt;code&gt;AbortController&lt;/code&gt; instance.&lt;/p&gt;
&lt;p&gt;The last step is to pass the &lt;code&gt;AbortController&lt;/code&gt; instance to the &lt;code&gt;on()&lt;/code&gt; function. We do that by passing an options object and using the &lt;code&gt;signal&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;You might have noticed that we also added a &lt;code&gt;try/catch&lt;/code&gt; block. This is actually very important. When we stop the iteration using an &lt;code&gt;AbortController&lt;/code&gt; this will not simply stop the iteration, but it will raise an exception.&lt;/p&gt;
&lt;p&gt;In this case the exception is expected, so we handle it gracefully. We also want to distinguish the abort exception from other unintended exceptions, so we make sure to check wheter our abort signal was raised, otherwise we exit the program with an error.&lt;/p&gt;
&lt;p&gt;Note that this is a lot of work, so this pattern, while it&#39;s cute, might not always give you great benefits compared to simply handling events using regular listeners.&lt;/p&gt;
&lt;h2 id=&quot;consuming-paginated-data-with-async-iterators&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Consuming paginated data with async iterators&lt;/h2&gt;
&lt;p&gt;As we mentioned before with the DynamoDB examples, another great use case for async iteration is when we need to fetch data from a remote paginated dataset. Even more so when we cannot determine how to access the next page until we have fetched the previous one. This is a typical example of asynchronous sequential iteration and it&#39;s probably the most adequate use case for async iterators.&lt;/p&gt;
&lt;p&gt;Just to present a very simple example, let&#39;s use &lt;a href=&quot;https://swapi.dev/&quot;&gt;a free and open-source Star Wars API&lt;/a&gt; (happy May 4th everyone!) which allows us to access all the Star Wars characters in a paginated fashion.&lt;/p&gt;
&lt;p&gt;To get data from this API, we can make a GET request to the following endpoint:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;https://swapi.dev/api/people&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This request will respond with a JSON message that looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;82&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;next&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://swapi.dev/api/people/?page=2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;results&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Sly Moore&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;178&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;more fields...&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Another character&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;whatever&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;more fields...&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;more characters&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the &lt;code&gt;next&lt;/code&gt; field contains the URL that we can use to fetch the data from the following page. All the records for the current page are presented in the &lt;code&gt;results&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;With these details in mind, this is how we can create a custom client that allows us to fetch all the characters using the &lt;code&gt;for await...of&lt;/code&gt; syntax:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; axios &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;axios&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;starWarsCharacters&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; nextUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://swapi.dev/api/people&#39;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextUrl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextUrl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    nextUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;results
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can use this function as follows:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;starWarsCharacters&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; char &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;char&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we run this code we should see the following output:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Luke Skywalker
C-3PO
R2-D2
Darth Vader
Leia Organa
[... other 77 names]&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This concludes our exploration of JavaScript iteration protocols. At this point, you should feel comfortable understanding what the various protocols are and how to use &lt;code&gt;for...of&lt;/code&gt; and &lt;code&gt;for await...of&lt;/code&gt; effectively in both JavaScript and Node.js.&lt;/p&gt;
&lt;p&gt;These techniques are often ideal to implement synchronous and asynchronous sequential iteration patterns, which makes them very effective tools in our toolbelt.&lt;/p&gt;
&lt;p&gt;If you are interested in learning more patterns and interesting Node.js techniques, consider checking out &lt;a href=&quot;https://www.nodejsdesignpatterns.com/&quot;&gt;Node.js Design Patterns&lt;/a&gt;. You can grab a free chapter for free by filling the form at the end of this page. Among other things, this free chapter contains some other examples of iteration and async iterators!&lt;/p&gt;
&lt;p&gt;See you at the next post!&lt;/p&gt;
&lt;p&gt;CIAO 👋&lt;/p&gt;
&lt;p&gt;P.S. All the examples presented in this article are available on GitHub at &lt;a href=&quot;https://github.com/lmammino/javascript-iteration-protocols&quot;&gt;lmammino/javascript-iteration-protocols&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Thanks to &lt;a href=&quot;https://twitter.com/mariocasciaro&quot;&gt;Mario Casciaro&lt;/a&gt; for the kind review of this article and to &lt;a href=&quot;https://twitter.com/Dominus_Kelvin&quot;&gt;Kelvin Omereshone&lt;/a&gt; for finding and fixing a few typos.&lt;/small&gt;&lt;/p&gt;
</content>
    </entry>
    
    <entry>
      <title>Node.js stream consumer utilities</title>
      <link href="https://www.nodejsdesignpatterns.com/blog/node-js-stream-consumer/"/>
      <updated>2022-03-11T12:30:00Z</updated>
      <id>https://www.nodejsdesignpatterns.com/blog/node-js-stream-consumer/</id>
      <content type="html">&lt;p&gt;How many times did you need to read the entire content of a &lt;code&gt;Readable&lt;/code&gt; stream into memory and ended up writing something like this?&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; chunks &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
someReadableStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; chunks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chunk&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
someReadableStream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;end&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Buffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chunks&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// do something with `data`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or using &lt;a href=&quot;https://www.nodejsdesignpatterns.com/blog/javascript-async-iterators/&quot;&gt;async iterators&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; chunks &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; chunk &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; someReadableStream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  chunks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chunk&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Buffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chunks&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// do something with `data`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a bit of a boilerplate-heavy solution for just consuming an entire readable stream. Consider that here we are not even handling errors, trying to do that (as we should!) will add even more boilerplate!&lt;/p&gt;
&lt;p&gt;If you wish there was an easier way, well keep reading, this article is for you!&lt;/p&gt;
&lt;h2 id=&quot;the-stream%2Fconsumers-module&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;The &lt;code&gt;stream/consumers&lt;/code&gt; module&lt;/h2&gt;
&lt;p&gt;Since Node.js version 16, there is a new built in stream utility library called &lt;code&gt;stream/consumers&lt;/code&gt; which offers a bunch of useful utilities to consume the entire content of a &lt;code&gt;ReadableStream&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;s&gt;At the time of writing this article, &lt;code&gt;stream/consumers&lt;/code&gt; does not even appear in the official Node.js documentation, so it&#39;s still of a hidden gem. Hopefully this article will help to spread the word a little bit.&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: It turns out that this module is documented under the &lt;a href=&quot;https://nodejs.org/api/webstreams.html#streamconsumersjsonstream&quot;&gt;Web Streams API section&lt;/a&gt; and in fact these utilities are both compatible with Node.js streams and web streams.&lt;/p&gt;
&lt;p&gt;Without further ado, let&#39;s see what&#39;s inside this module:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; consumers &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;stream/consumers&#39;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;consumers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we run this code, we will see the following output:&lt;/p&gt;
&lt;pre class=&quot;language-plain&quot;&gt;&lt;code class=&quot;language-plain&quot;&gt;{
  arrayBuffer: [AsyncFunction: arrayBuffer],
  blob: [AsyncFunction: blob],
  buffer: [AsyncFunction: buffer],
  text: [AsyncFunction: text],
  json: [AsyncFunction: json]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, what we can tell is that the &lt;code&gt;stream/consumers&lt;/code&gt; module exposes some async function that seem to be helpful to consume &lt;code&gt;Readable&lt;/code&gt; streams in different ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As binary data (&lt;code&gt;ArrayBuffer&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Buffer&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;As text&lt;/li&gt;
&lt;li&gt;As JSON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next sections we will see some examples on how to use these functions.&lt;/p&gt;
&lt;h2 id=&quot;reading-a-binary-file-from-a-readable-stream&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Reading a binary file from a Readable stream&lt;/h2&gt;
&lt;p&gt;Ok, let&#39;s say that we have to do some processing on a picture and, in order to do that, we need to load the entire binary content representing the picture from a file to memory.&lt;/p&gt;
&lt;p&gt;We could easily use the &lt;code&gt;buffer&lt;/code&gt; function from the &lt;code&gt;stream/consumers&lt;/code&gt; library to do that:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; path &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;path&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; createReadStream &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; consumers &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;stream/consumers&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; __dirname &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;meta&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pathname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; readable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createReadStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;picture.png&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; consumers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;readable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we execute this code, we will see the following output:&lt;/p&gt;
&lt;pre class=&quot;language-plain&quot;&gt;&lt;code class=&quot;language-plain&quot;&gt;(node:7685) ExperimentalWarning: buffer.Blob is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
&amp;lt;Buffer 89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 00 00 02 80 00 00 01 c1 08 02 00 00 00 76 43 9d 20 00 00 00 01 73 52 47 42 00 ae ce 1c e9 00 00 00 04 ... 347824 more bytes&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see that all the binary data (~300Kb) was loaded in the buffer, but also that this feature (as of v17.7.1) is still experimental and therefore we get a warning. You will get a similar warning also when trying to use &lt;code&gt;consumers.arrayBuffer&lt;/code&gt; and &lt;code&gt;consumers.blob&lt;/code&gt;. This will be the case until &lt;code&gt;buffer.Blob&lt;/code&gt; is stabilised.&lt;/p&gt;
&lt;h2 id=&quot;reading-a-json-object-from-a-readable-stream&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Reading a JSON object from a Readable stream&lt;/h2&gt;
&lt;p&gt;Similarly to what we just saw in the previous section, we can use the &lt;code&gt;stream/consumers&lt;/code&gt; library to consume the entire content of a &lt;code&gt;ReadableStream&lt;/code&gt; as a JSON encoded string. For instance, we could use this to process the response body from an HTTP request:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; get &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https&#39;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; consumers &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;stream/consumers&#39;&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://rickandmortyapi.com/api/character/639&#39;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; consumers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we are using the awesome (and free) &lt;a href=&quot;https://rickandmortyapi.com/&quot;&gt;The Rick and Morty API&lt;/a&gt;. If we run this code we should see the following output:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;639&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Uncle Nibbles&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  status&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Dead&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  species&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Alien&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Soulless Puppet&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  gender&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Male&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  origin&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Tickets Please Guy Nightmare&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;https&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//rickandmortyapi.com/api/location/98&#39;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  location&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Tickets Please Guy Nightmare&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;https&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//rickandmortyapi.com/api/location/98&#39;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  image&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;https&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//rickandmortyapi.com/api/character/avatar/639.jpeg&#39;,&lt;/span&gt;
  episode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &#39;https&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//rickandmortyapi.com/api/episode/37&#39; ],&lt;/span&gt;
  url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;https&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//rickandmortyapi.com/api/character/639&#39;,&lt;/span&gt;
  created&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;&lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;-08&lt;/span&gt;-06T16&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;.084Z&#39;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s also worth mentioning that &lt;code&gt;consumers.json&lt;/code&gt; does not produce any warning, so this feature can be considered stable in Node.js 16.&lt;/p&gt;
&lt;h2 id=&quot;reading-a-text-from-a-readable-stream&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Reading a text from a Readable stream&lt;/h2&gt;
&lt;p&gt;Let&#39;s discuss one more example. Let&#39;s try to consume an entire readable stream as text, which means that we will be consuming the stream assuming it&#39;s a valid UTF-8 encoded string and save the result into a string variable.&lt;/p&gt;
&lt;p&gt;One simple example could be to try to read a string from the standard input in a CLI application:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; consumers &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;stream/consumers&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; consumers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stdin&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we try to run the script as follows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; mobydick.txt &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; stdin.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We should see something like this in the output:&lt;/p&gt;
&lt;pre class=&quot;language-plain&quot;&gt;&lt;code class=&quot;language-plain&quot;&gt;CHAPTER 1

Loomings.


Call me Ishmael.  Some years ago--never mind how long
precisely--having little or no money in my purse, and nothing
particular to interest me on shore, I thought I would sail about a
little and see the watery part of the world.  It is a way I have of
driving off the spleen and regulating the circulation.  Whenever I
find myself growing grim about the mouth; whenever it is a damp,
drizzly November in my soul; whenever I find myself involuntarily
pausing before coffin warehouses, and bringing up the rear of every
funeral I meet; and especially whenever my hypos get such an upper
hand of me, that it requires a strong moral principle to prevent me
from deliberately stepping into the street, and methodically knocking
people&#39;s hats off--then, I account it high time to get to sea as soon
as I can.  This is my substitute for pistol and ball.  With a
philosophical flourish Cato throws himself upon his sword; I quietly
take to the ship.  There is nothing surprising in this.  If they but
knew it, almost all men in their degree, some time or other, cherish
very nearly the same feelings towards the ocean with me.

[...]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, no warnings, so this feature is stable in Node.js v16.&lt;/p&gt;
&lt;h2 id=&quot;is-this-even-a-good-idea%3F&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Is this even a good idea?&lt;/h2&gt;
&lt;p&gt;Now that you know how to use this utility, it&#39;s worth mentioning that as with all good things it should be used with moderation.&lt;/p&gt;
&lt;p&gt;In fact, accumulating all the content of a stream in memory is something that should not be done lightly.&lt;/p&gt;
&lt;p&gt;Streams are an abstraction that has been built into Node.js to allow developers to handle arbitrary amounts of data (even infinite streams) and process such data as soon as possible, while still keeping the memory footprint low.&lt;/p&gt;
&lt;p&gt;By processing the data in chunks, we can keep the amount of memory being allocated at any given time low and have our processing logic run efficiently.&lt;/p&gt;
&lt;p&gt;When we accumulate an entire stream we are effectively defeating all the advantages of Node.js streams, so this is something that is recommended only when you are absolutely certain you are dealing with small amounts of data.&lt;/p&gt;
&lt;h2 id=&quot;wapping-up&quot; tabindex=&quot;-1&quot; class=&quot;title is-2&quot;&gt;Wapping up&lt;/h2&gt;
&lt;p&gt;This is all for this article, feel free to &lt;a href=&quot;https://twitter.com/loige&quot;&gt;reach out to me on Twitter&lt;/a&gt; if you found this article interesting and if you think you learned something useful.&lt;/p&gt;
&lt;p&gt;If you are curious, you can also &lt;a href=&quot;https://github.com/nodejs/node/blob/main/lib/stream/consumers.js&quot;&gt;read the code of the &lt;code&gt;stream/consumers&lt;/code&gt; module&lt;/a&gt;, it&#39;s actually a really thin layer (less than 100 lines) and you can learn a trick or two by doing that.&lt;/p&gt;
&lt;p&gt;See you in the next article!&lt;/p&gt;
</content>
    </entry>
</feed>