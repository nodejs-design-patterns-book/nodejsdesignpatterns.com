---
import { Picture } from 'astro:assets'
import { Code } from 'astro-expressive-code/components'
import casualManReading from '@images/mktg/casual-man-reading1.png'
import githubCommunity from '@images/mktg/github-community.png'

const code1 = `import { createServer } from 'node:http'
import { parseArgs } from 'node:util'
import staticHandler from 'serve-handler' // v6.1.6
import { WebSocketServer } from 'ws' // v8.18.2
import zmq from 'zeromq' // v6.3.0

const { values: args } = parseArgs({
  options: {
    http: {
      type: 'string',
    },
    pub: {
      type: 'string',
    },
    sub: {
      type: 'string',
      multiple: true,
    },
  },
  args: process.argv.slice(2),
})

if (!(args.http && args.pub && args.sub)) {
  console.error(
    'Usage: node index.js --http <port> --pub <port> --sub <port1> [--sub <port2> ...]'
  )
  process.exit(1)
}

// serve static files
const server = createServer((req, res) => {
  return staticHandler(req, res, { public: 'web' })
})

// Inizialize ZeroMq sockets
const pubSocket = new zmq.Publisher()
await pubSocket.bind(\`tcp://127.0.0.1:\${args.pub}\`)
const subSocket = new zmq.Subscriber()
for (const port of args.sub) {
  console.log(\`Subscribing to port \${port}\`)
  await subSocket.connect(\`tcp://127.0.0.1:\${port}\`)
}
subSocket.subscribe('chat_messages')

// Receive messages from other servers
async function receiveMessages() {
  for await (const [_topic, msg] of subSocket) {
    console.log(\`Received message from another server: \${msg.toString()}\`)
    broadcast(Buffer.from(msg))
  }
}
receiveMessages()

const wss = new WebSocketServer({ server })
wss.on('connection', client => {
  console.log('Client connected')
  client.on('message', msg => {
    console.log(\`Message: \${msg}\`)
    broadcast(msg)
    pubSocket.send(['chat_messages', msg])
  })
})

function broadcast(msg) {
  for (const client of wss.clients) {
    if (client.readyState === WebSocket.OPEN) {
      client.send(msg)
    }
  }
}

server.listen(args.http)`
---

<section
  id="process"
  class="bg-gradient-to-br from-primary/10 to-primary/20 py-16 sm:py-32 mt-16"
>
  <div class="mx-auto max-w-2xl px-6 lg:max-w-7xl lg:px-8">
    <h2
      class="mx-auto mt-2 max-w-lg text-center text-4xl font-semibold tracking-tight text-balance text-base-content sm:text-5xl"
    >
      Why Choose Node.js Design Patterns?
    </h2>

    <div class="mt-10 grid gap-4 sm:mt-16 lg:grid-cols-3 lg:grid-rows-2">
      <div class="bg-base-100 lg:order-1 p-8">
        <p class="mt-2 text-xl font-bold tracking-tight text-base-content">
          Master the Full Node.js Ecosystem
        </p>
        <p class="mt-2 max-w-lg text-lg text-base-content/80">
          Get a complete 360Â° understanding of Node.js, from core principles to
          advanced architecture. With 660 pages of theory, practical insights,
          and real-world examples, you'll gain the skills to write scalable and
          maintainable Node.js applications.
        </p>
      </div>

      <div class="lg:order-4 bg-base-100">
        <Picture
          formats={['avif', 'webp', 'png']}
          layout="fixed"
          src={casualManReading}
          alt={'Man with long curly hair and a pink shirt sitting on outdoor steps, reading the book "Node.js Design Patterns, Fourth Edition" by Luciano Mammino and Mario Casciaro.'}
          loading="lazy"
          class="w-full h-full object-cover object-center-center"
          width={800}
          height={800}
        />
      </div>

      <div class="bg-base-100 lg:order-5 p-8">
        <p class="mt-2 text-xl font-bold tracking-tight text-base-content">
          Realistic code examples
        </p>
        <p class="mt-2 max-w-lg text-lg text-base-content/80">
          Each topic in the book is introduced with practical, real-world
          applications. You'll learn by building projects like a website
          scraper, a flexible configuration system that supports multiple file
          formats, and a distributed chat application with message persistence.
          And you'll do it by combining Node.js with real-world technologies
          such as Redis, RabbitMQ, Docker, Kubernetes, ZeroMQ, Consul, and much
          more.
        </p>
      </div>

      <div class="bg-secondary lg:order-2 h-[600px] lg:h-auto">
        <div class="relative h-full w-full grow">
          <div class="absolute top-4 right-0 bottom-0 left-4 overflow-auto">
            <Code
              lang="js"
              code={code1}
              title="server.js"
              frame="code"
              class="rounded-none"
            />
          </div>
        </div>
      </div>

      <div class="bg-base-100 lg:order-3 p-8">
        <p class="mt-2 text-xl font-bold tracking-tight text-base-content">
          Learn with the Community
        </p>
        <p class="mt-2 max-w-lg text-lg text-base-content/80">
          Every chapter includes hands-on exercises to help you solidify your
          knowledge and apply it to real projects. You don't have to tackle them
          alone, as you can join a vibrant GitHub community where you exchange
          ideas, discuss solutions, and grow alongside fellow developers.
        </p>
      </div>

      <div class="bg-base-100 lg:order-6">
        <Picture
          formats={['avif', 'webp', 'png']}
          layout="fixed"
          position="left top"
          src={githubCommunity}
          alt={'Screenshot of the GitHub Discussions section for the book Node.js Design Patterns, where readers share exercise solutions and discuss common Node.js challenges such as subset sum, process.nextTick, async/await, and encapsulation, with visible upvote counts and answer statuses.'}
          loading="lazy"
          class="w-full h-full object-cover object-top-left"
          width={800}
          height={800}
        />
      </div>
    </div>
  </div>
</section>
